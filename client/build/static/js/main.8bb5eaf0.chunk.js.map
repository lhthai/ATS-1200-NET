{"version":3,"sources":["helpers/socket.js","helpers/formatDateTime.js","components/Topbar.jsx","components/SubMenu.jsx","components/Sidebar.jsx","components/Footer.jsx","components/MainLayout.jsx","components/RouteLayout.jsx","actions/setting/itemOperationSettingActions.js","actions/action_types.js","actions/weighingActions.js","actions/setting/weighingOperationSettingActions.js","helpers/autoComplete.js","actions/measurementDataListActions.js","pages/MasterMenu/TruckMaster/DataModal.jsx","components/PrintModal.jsx","pages/Weighing/IndicatorStatus.jsx","pages/Weighing/StayingTrucks.jsx","pages/Weighing/MasterDataInput.jsx","pages/Weighing/Index.jsx","components/DeleteModal.jsx","pages/StayingTruckList.jsx","actions/master/brandActions.js","pages/MasterMenu/common/FormModal.jsx","components/ExportCSV.jsx","pages/MasterMenu/common/CustomTable.jsx","pages/MasterMenu/BrandMaster.jsx","pages/MasterMenu/TruckMaster/TruckFormModal.jsx","pages/MasterMenu/TruckMaster/TruckMaster.jsx","actions/master/truckActions.js","actions/master/destinationActions.js","pages/MasterMenu/DestinationMaster.jsx","actions/master/otherActions.js","pages/MasterMenu/OtherMaster.jsx","actions/master/vendorActions.js","pages/MasterMenu/VendorMaster.jsx","helpers/printPDF.js","pages/MeasurementDataList.jsx","pages/SummaryReport.jsx","helpers/sorting.js","actions/summaryReportActions.js","pages/ManualWeighing.jsx","pages/SettingMenu/ItemOperationSetting/InputName.jsx","pages/SettingMenu/ItemOperationSetting/SelectDisplay.jsx","pages/SettingMenu/ItemOperationSetting/SelectRequired.jsx","pages/SettingMenu/ItemOperationSetting/index.jsx","pages/SettingMenu/OperationSetting/IndicatorDetail.jsx","pages/SettingMenu/OperationSetting/Index.jsx","pages/SettingMenu/MaintenanceDataUpload.jsx","actions/setting/backupActions.js","pages/SettingMenu/Backup/BackupUSB.jsx","pages/SettingMenu/Backup/Index.jsx","pages/SettingMenu/Restore.jsx","pages/SettingMenu/Update.jsx","Routes.jsx","App.jsx","reducers/master/brandReducers.js","reducers/master/vendorReducers.js","reducers/master/destinationReducers.js","reducers/master/otherReducers.js","reducers/master/truckReducers.js","reducers/stayingTruckReducers.js","reducers/setting/itemOperationSettingReducers.js","reducers/measurementDataListReducers.js","reducers/weighingReducers.js","reducers/setting/weighingOperationSettingReducers.js","reducers/summaryReportReducers.js","reducers/setting/backupReducers.js","reducers/index.js","serviceWorker.js","index.jsx"],"names":["socket","socketIOClient","formatDateTime","date","Date","hour","getHours","min","getMinutes","sec","getSeconds","year","getFullYear","month","getMonth","day","getDate","Topbar","toggleSidebar","useState","weight","setWeight","flag","setFlag","currentTime","setCurrentTime","on","data","useEffect","intervalID","setInterval","clearInterval","Navbar","color","light","className","expand","NavbarToggler","onClick","Nav","navbar","NavItem","tag","SubMenu","items","name","icon","openSubMenu","setOpenSubMenu","NavLink","Link","to","faChevronDown","faChevronRight","vertical","style","display","map","item","key","link","masterItems","faDatabase","settingItems","faCog","faUpload","faListAlt","faCloud","faUndo","Sidebar","id","flexDirection","flex","pathname","weighingProp","weighing","faTachometerAlt","faTruck","faList","faCalendarAlt","faFolderPlus","faTh","faTools","Footer","href","target","rel","Layout","children","openSidebar","setOpenSidebar","RouteLayout","Component","component","layout","rest","render","props","getItemsOperationSetting","dispatch","a","async","type","axios","get","payload","toast","error","autoClose","createWeighing","post","updateWeighing","weighingData","put","_id","getMaxSlipNo","getStayingTrucks","createStayingTrucks","updateStayingTruck","success","getMeasurementDataList","deleteMeassurementDataList","delete","getWeighingOperationSetting","updateWeighingOperationSetting","operationSetting","emit","setTimeout","info","autoCompleteMasterData","e","state","setState","value","length","autoCompleteTruckMasterData","initialState","emptyWeight","truckMaster","updateMeasurementDataList","weightData","DataModal","modal","toggle","masterItem","onSelect","setItems","getItems","Modal","isOpen","ModalHeader","ModalBody","height","overflowY","Table","bordered","hover","code","Button","size","onSelectClick","ModalFooter","PrintModal","IndicatorStatus","indicatorReady","setIndicatorReady","printerReady","setPrinterReady","isReady","Alert","faCheckCircle","faExclamationCircle","StayingTrucks","disableWeighing","forceWeighing","setIsUpdating","stayingTrucks","useSelector","useDispatch","Col","sm","xl","Card","CardHeader","CardBody","responsive","truckNumber","vendorCode","vendor","minWidth","disabled","faEdit","MasterDataInput","required","labelName","codeName","codeValue","dataName","dataValue","handleAutoComplete","handleOnclick","handleChange","FormGroup","row","Label","for","xs","Input","maxLength","onChange","slipNo","numberingType","brandCode","brand","destinationCode","destination","otherCode","other","emptyTime","grossWeight","grossTime","correctionNet","edited","Weighing","location","updatingStayingTruck","updatingMeasurementData","setWeightData","openModal","setOpenModal","printModal","setPrintModal","printData","setPrintData","setMasterItem","isUpdating","isUpdatingStayingTruck","setIsUpdatingStayingTruck","isUpdatingMeasurementData","setIsUpdatingMeasurementData","itemOperation","itemOperationSetting","weighingOperationSetting","maxSlipNo","setDisableWeighing","setForceWeighing","intervalId","now","Number","toFixed","weighingStartWeight","handleOnClick","Row","Badge","Form","onSubmit","preventDefault","Object","assign","slipNoStart","Math","abs","item1","require","item2","item3","item4","item5","offset","md","selectedItem","inputName","inputCode","DeleteModal","deleteItem","StayingTruckList","isLoading","openDeleteModal","setOpenDeleteModal","currentItem","setCurrentItem","search","setSearch","fildteredItems","filter","toLowerCase","indexOf","faTable","placeholder","Spinner","minHeight","faTrash","getBrands","createBrand","deleteBrand","updateBrand","FormModal","isEditing","createItem","updateItem","itemName","setItem","handleSubmit","onKeyPress","ExportCSV","csvData","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","faDownload","CustomTable","tableName","setIsEditing","deleteModal","setDeleteModal","formModal","setFormModal","lg","faPlusCircle","handleUpdate","handleDelete","BrandMaster","brands","maximumWeight","TruckFormModal","currentTruck","updateTruck","createTruck","truckItem","setTruckItem","openDataModal","setOpenDataModal","handleKeyPress","itemCode","TruckMaster","trucks","truck","getDestinations","createDestination","deleteDestination","updateDestination","DestinationMaster","destinations","getOthers","createOther","deleteOther","updateOther","OtherMaster","others","getVendors","createVendor","deleteVendor","updateVendor","VendorMaster","vendors","printPDF","tableToPrint","document","getElementById","printWindow","window","open","write","outerHTML","print","close","momentLocalizer","moment","MeasurementDataList","measurementData","setDate","time","faPrint","SummaryReport","summaryReport","fromDate","setFromDate","toDate","setToDate","firstItem","setFirstItem","firstItemHead","setFirstItemHead","secondItem","setSecondItem","secondtemHead","setSecondItemHead","bindData","setBindData","isSortingUp","setIsSortingUp","handleSortUp","key1","key2","firstKey","secondKey","temp","sort","undefined","b","x","toString","parseFloat","y","handleSortDown","hanldleSort","baseUrl","toISOString","getSummaryReport","faSort","index","totalCount","totalWeight","ManualWeighing","netWeight","InputName","label","SelectDisplay","SelectRequired","item6","ItemOperationSetting","handleChangeItemName","handleChangeItemDisplay","handleChangeItemRequired","renderSelectDisplay","renderSelectRequired","renderInputName","i","push","CardTitle","IndicatorDetail","showIndicator","baudRate","parity","dataBits","stopBits","indicatorSetting","portName","documentNumbering","maintenanceDataUpload","isEnabling","uploadInterval","OperationSetting","serialPorts","setShowIndicator","showSlipPrinter","setShowSlipPrinter","handleChangeOperationWeighing","handleChangeIndicatorSetting","port","manufacturer","serialNumber","path","parseInt","MaintenanceDataUpload","opearationSetting","CustomInput","checked","max","getUSBDrives","BackupUSB","backupDestination","setBackupDestination","drives","isUSBLoading","drive","device","mountpoints","description","CardText","Progress","animated","Backup","backup","setIsUSBLoading","Restore","setIsLoading","restoreDestination","setRestoreDestination","setting","restoreItem","setRestoreItem","check","Update","Jumbotron","NotFound","React","lazy","Routes","Suspense","fallback","MainLayout","exact","browserHistory","createBrowserHistory","App","history","position","brandReducers","action","vendorReducers","destinationReducers","otherReducers","truckReducers","stayingTruckReducers","itemOperationSettingReducers","measurementDataListReducers","weighingReducers","slipPrinterSetting","weighingOperationSettingReducers","summaryReportReducers","backupReducers","rootReducer","combineReducers","measurementDataList","Boolean","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bb5eaf0.chunk.js","sourcesContent":["import socketIOClient from 'socket.io-client'\r\n\r\nconst socket = socketIOClient('ws://localhost:8000')\r\n\r\nexport default socket\r\n","const formatDateTime = () => {\r\n  const date = new Date()\r\n  let hour = date.getHours()\r\n  hour = (hour < 10 ? '0' : '') + hour\r\n\r\n  let min = date.getMinutes()\r\n  min = (min < 10 ? '0' : '') + min\r\n\r\n  let sec = date.getSeconds()\r\n  sec = (sec < 10 ? '0' : '') + sec\r\n\r\n  const year = date.getFullYear()\r\n\r\n  let month = date.getMonth() + 1\r\n  month = (month < 10 ? '0' : '') + month\r\n\r\n  let day = date.getDate()\r\n  day = (day < 10 ? '0' : '') + day\r\n\r\n  return `${day}/${month}/${year} ${hour}:${min}:${sec}`\r\n}\r\n\r\nexport default formatDateTime\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Navbar, NavbarToggler, Nav, NavItem } from 'reactstrap'\r\n\r\nimport socket from '../helpers/socket'\r\nimport formatDateTime from '../helpers/formatDateTime'\r\n\r\nconst Topbar = ({ toggleSidebar }) => {\r\n  const [weight, setWeight] = useState(0)\r\n  const [flag, setFlag] = useState('')\r\n  const [currentTime, setCurrentTime] = useState(null)\r\n\r\n  socket.on('readWeight', data => {\r\n    setWeight(data.weight)\r\n    setFlag(data.flag)\r\n  })\r\n\r\n  useEffect(() => {\r\n    const intervalID = setInterval(() => {\r\n      setCurrentTime(formatDateTime())\r\n    }, 1000)\r\n    return () => clearInterval(intervalID)\r\n  }, [])\r\n\r\n  return (\r\n    <Navbar\r\n      color=\"light\"\r\n      light\r\n      className=\"navbar shadow-sm p-3 mb-3 rounded justify-content-end\"\r\n      expand=\"xl\"\r\n    >\r\n      <NavbarToggler onClick={toggleSidebar} />\r\n      <Nav className=\"mr-auto mt-2 ml-3\" navbar>\r\n        <NavItem>{currentTime}</NavItem>\r\n        {(flag === 'ST' && (\r\n          <NavItem className=\"ml-5 text-success\">Stable</NavItem>\r\n        )) ||\r\n          (flag === 'OL' && (\r\n            <NavItem className=\"ml-5 text-danger\">Overload</NavItem>\r\n          )) || <div />}\r\n      </Nav>\r\n      <Nav className=\"mx-auto\" navbar>\r\n        <NavItem tag=\"h2\" className=\"text-danger mt-2\">\r\n          {weight} KG\r\n        </NavItem>\r\n      </Nav>\r\n    </Navbar>\r\n  )\r\n}\r\nTopbar.propTypes = {\r\n  toggleSidebar: PropTypes.func.isRequired,\r\n}\r\nexport default Topbar\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Nav, NavItem, NavLink } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faChevronRight,\r\n  faChevronDown,\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction SubMenu({ items, name, icon }) {\r\n  const [openSubMenu, setOpenSubMenu] = useState(false)\r\n\r\n  const toggleSubmenu = () => {\r\n    setOpenSubMenu(!openSubMenu)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <NavLink tag={Link} to=\"#\" className=\"p-3\" onClick={toggleSubmenu}>\r\n        <FontAwesomeIcon icon={icon} className=\"mr-2\" />\r\n        {name}\r\n        {openSubMenu ? (\r\n          <FontAwesomeIcon icon={faChevronDown} className=\"ml-5\" />\r\n        ) : (\r\n          <FontAwesomeIcon icon={faChevronRight} className=\"ml-5\" />\r\n        )}\r\n      </NavLink>\r\n      <Nav vertical style={{ display: openSubMenu ? '' : 'none' }}>\r\n        {items.map(item => (\r\n          <NavItem key={item.name}>\r\n            <NavLink\r\n              className=\"pl-4\"\r\n              tag={Link}\r\n              to={item.link}\r\n              // onClick={closeSidebar}\r\n            >\r\n              {' '}\r\n              <FontAwesomeIcon icon={item.icon} className=\"mr-2\" />\r\n              {item.name}\r\n            </NavLink>\r\n          </NavItem>\r\n        ))}\r\n      </Nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nSubMenu.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: '',\r\n      link: '',\r\n      icon: '',\r\n    }),\r\n  ).isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  // eslint-disable-next-line react/forbid-prop-types\r\n  icon: PropTypes.object.isRequired,\r\n  // closeSidebar: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default SubMenu\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Nav, NavItem, NavLink } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faTachometerAlt,\r\n  faTh,\r\n  faCalendarAlt,\r\n  faList,\r\n  faCloud,\r\n  faFolderPlus,\r\n  faTools,\r\n  faTruck,\r\n  faCog,\r\n  faDatabase,\r\n  faListAlt,\r\n  faUndo,\r\n  faUpload,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport SubMenu from './SubMenu';\r\n\r\nimport './style.css';\r\n\r\nconst masterItems = [\r\n  {\r\n    name: 'Brand Master',\r\n    link: '/brand-master',\r\n    icon: faDatabase,\r\n  },\r\n  {\r\n    name: 'Vendor Master',\r\n    link: '/vendor-master',\r\n    icon: faDatabase,\r\n  },\r\n  {\r\n    name: 'Destination Master',\r\n    link: '/destination-master',\r\n    icon: faDatabase,\r\n  },\r\n  {\r\n    name: 'Other Master',\r\n    link: '/other-master',\r\n    icon: faDatabase,\r\n  },\r\n  {\r\n    name: 'Truck Master',\r\n    link: '/truck-master',\r\n    icon: faDatabase,\r\n  },\r\n];\r\n\r\nconst settingItems = [\r\n  {\r\n    name: 'Operation Settings',\r\n    link: '/operation-setting',\r\n    icon: faCog,\r\n  },\r\n  {\r\n    name: 'Maintenance Data Upload',\r\n    link: '/maintenance-data-upload',\r\n    icon: faUpload,\r\n  },\r\n  {\r\n    name: 'Item Operation Settings',\r\n    link: '/item-operation-setting',\r\n    icon: faListAlt,\r\n  },\r\n  {\r\n    name: 'Backup Data',\r\n    link: '/backup',\r\n    icon: faCloud,\r\n  },\r\n  {\r\n    name: 'Restore Data',\r\n    link: '/restore',\r\n    icon: faUndo,\r\n  },\r\n];\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <div\r\n      className=\"bg-light vertical\"\r\n      id=\"sidebar-wrapper\"\r\n      style={{ display: 'flex', flexDirection: 'column' }}\r\n    >\r\n      <div className=\"p-4 d-flex justify-content-center\">\r\n        <h4 className=\"text-center\">ATS-1200-NET</h4>\r\n      </div>\r\n      <hr className=\"m-0\" />\r\n      <Nav vertical style={{ flex: 1 }}>\r\n        <NavItem>\r\n          <NavLink\r\n            className=\"p-3\"\r\n            tag={Link}\r\n            to={{\r\n              pathname: '/',\r\n              weighingProp: { weighing: '' },\r\n            }}\r\n            // onClick={closeSidebar}\r\n          >\r\n            <FontAwesomeIcon icon={faTachometerAlt} className=\"mr-2\" />\r\n            Weighing\r\n          </NavLink>\r\n        </NavItem>\r\n        <p className=\"text-secondary font-weight-bold text-uppercase mb-0 p-4\">\r\n          Menu\r\n        </p>\r\n        <NavItem>\r\n          <NavLink\r\n            className=\"p-3\"\r\n            tag={Link}\r\n            to=\"/staying-truck-list\"\r\n            // onClick={closeSidebar}\r\n          >\r\n            <FontAwesomeIcon icon={faTruck} /> Staying Truck List\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink\r\n            className=\" p-3\"\r\n            tag={Link}\r\n            to=\"/measurement-data-list\"\r\n            // onClick={closeSidebar}\r\n          >\r\n            <FontAwesomeIcon icon={faList} className=\"mr-2\" />\r\n            Measurement Data List\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink\r\n            className=\" p-3\"\r\n            tag={Link}\r\n            to=\"/summary-report\"\r\n            // onClick={closeSidebar}\r\n          >\r\n            <FontAwesomeIcon icon={faCalendarAlt} className=\"mr-2\" />\r\n            Summary Report\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink\r\n            className=\"p-3\"\r\n            tag={Link}\r\n            to=\"/manual-weighing\"\r\n            // onClick={closeSidebar}\r\n          >\r\n            <FontAwesomeIcon icon={faFolderPlus} className=\"mr-2\" />\r\n            Manual Weighing\r\n          </NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <SubMenu\r\n            items={masterItems}\r\n            name=\"Master Menu\"\r\n            icon={faTh}\r\n            // closeSidebar={closeSidebar}\r\n          />\r\n        </NavItem>\r\n        <NavItem>\r\n          <SubMenu\r\n            items={settingItems}\r\n            name=\"Setting Menu\"\r\n            icon={faTools}\r\n            // closeSidebar={closeSidebar}\r\n          />\r\n        </NavItem>\r\n      </Nav>\r\n      <hr className=\"m-0\" />\r\n      <div className=\"ml-3 bg-light\">\r\n        <p className=\"text-dark font-weight-bold my-2\">Version 1.0.0</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"text-center bg-light py-2\">\r\n      <span>\r\n        <a\r\n          className=\"text-dark\"\r\n          href=\"https://www.tanaka-scale.co.jp/en/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Copyright &copy; Tanaka Scale Works Co., Ltd\r\n        </a>\r\n      </span>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Topbar from './Topbar'\r\nimport Sidebar from './Sidebar'\r\nimport Footer from './Footer'\r\n\r\nconst Layout = ({ children }) => {\r\n  const [openSidebar, setOpenSidebar] = useState(false)\r\n  const toggleSidebar = () => {\r\n    setOpenSidebar(!openSidebar)\r\n  }\r\n  return (\r\n    <div className={`${openSidebar ? 'toggled' : ''} d-flex`} id=\"wrapper\">\r\n      <Sidebar />\r\n      <div id=\"page-content-wrapper\" className=\"pl-2\">\r\n        <Topbar toggleSidebar={toggleSidebar} />\r\n        <div style={{ flex: 1 }}>{children}</div>\r\n        <Footer />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout\r\n","/* eslint-disable react/jsx-props-no-spreading */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Route } from 'react-router-dom'\r\n\r\nconst RouteLayout = ({ component: Component, layout: Layout, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={props => (\r\n      <Layout>\r\n        <Component {...props} />\r\n      </Layout>\r\n    )}\r\n  />\r\n)\r\n\r\nRouteLayout.propTypes = {\r\n  component: PropTypes.func.isRequired,\r\n  layout: PropTypes.func.isRequired,\r\n}\r\nexport default RouteLayout\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  GET_ITEM_OPERATION_SETTING,\r\n  GET_ITEM_OPERATION_SETTING_SUCCESS,\r\n  UPDATE_ITEM_OPERATION_SETTING,\r\n} from '../action_types'\r\n\r\nexport const getItemsOperationSetting = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_ITEM_OPERATION_SETTING })\r\n    try {\r\n      const { data } = await axios.get('/setting/itemoperationsetting')\r\n      dispatch({ type: GET_ITEM_OPERATION_SETTING_SUCCESS, payload: data[0] })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateItemsOperationSetting = itemOperationSetting => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(\r\n        `/setting/itemoperationsetting/${itemOperationSetting._id}`,\r\n        itemOperationSetting,\r\n      )\r\n      dispatch({ type: UPDATE_ITEM_OPERATION_SETTING, payload: data })\r\n      toast.success('Settings are updated successfully')\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n","export const GET_BRANDS_MASTER = 'GET_BRANDS_MASTER'\r\nexport const GET_BRANDS_MASTER_SUCCESS = 'GET_BRANDS_MASTER_SUCCESS'\r\nexport const CREATE_BRAND_MASTER = 'CREATE_BRAND_MASTER'\r\nexport const UPDATE_BRAND_MASTER = 'UPDATE_BRAND_MASTER'\r\nexport const DELETE_BRAND_MASTER = 'DELETE_BRAND_MASTER'\r\n\r\nexport const GET_VENDORS_MASTER = 'GET_VENDORS_MASTER'\r\nexport const GET_VENDORS_MASTER_SUCCESS = 'GET_VENDORS_MASTER_SUCCESS'\r\nexport const CREATE_VENDOR_MASTER = 'CREATE_VENDOR_MASTER'\r\nexport const UPDATE_VENDOR_MASTER = 'UPDATE_VENDOR_MASTER'\r\nexport const DELETE_VENDOR_MASTER = 'DELETE_VENDOR_MASTER'\r\n\r\nexport const GET_DESTINATIONS_MASTER = 'GET_DESTINATION_MASTER'\r\nexport const GET_DESTINATIONS_MASTER_SUCCESS = 'GET_DESTINATION_MASTER_SUCCESS'\r\nexport const CREATE_DESTINATION_MASTER = 'CREATE_DESTINATION_MASTER'\r\nexport const UPDATE_DESTINATION_MASTER = 'UPDATE_DESTINATION_MASTER'\r\nexport const DELETE_DESTINATION_MASTER = 'DELETE_VENDOR_MASTER'\r\n\r\nexport const GET_OTHERS_MASTER = 'GET_OTHERS_MASTER'\r\nexport const GET_OTHERS_MASTER_SUCCESS = 'GET_OTHERS_MASTER_SUCCESS'\r\nexport const CREATE_OTHER_MASTER = 'CREATE_OTHER_MASTER'\r\nexport const UPDATE_OTHER_MASTER = 'UPDATE_OTHER_MASTER'\r\nexport const DELETE_OTHER_MASTER = 'DELETE_OTHER_MASTER'\r\n\r\nexport const GET_TRUCKS_MASTER = 'GET_TRUCKS_MASTER'\r\nexport const GET_TRUCKS_MASTER_SUCCESS = 'GET_TRUCKS_MASTER_SUCCESS'\r\nexport const CREATE_TRUCK_MASTER = 'CREATE_TRUCK_MASTER'\r\nexport const UPDATE_TRUCK_MASTER = 'UPDATE_TRUCK_MASTER'\r\nexport const DELETE_TRUCK_MASTER = 'DELETE_TRUCK_MASTER'\r\n\r\nexport const GET_STAYING_TRUCKS = 'GET_STAYING_TRUCKS'\r\nexport const GET_STAYING_TRUCKS_SUCCESS = 'GET_STAYING_TRUCKS_SUCCESS'\r\nexport const CREATE_STAYING_TRUCK = 'CREATE_STAYING_TRUCK'\r\nexport const UPDATE_STAYING_TRUCK = 'UPDATE_STAYING_TRUCK'\r\nexport const DELETE_STAYING_TRUCK = 'DELETE_STAYING_TRUCK'\r\n\r\nexport const GET_ITEM_OPERATION_SETTING = 'GET_ITEM_OPERATION_SETTING'\r\nexport const GET_ITEM_OPERATION_SETTING_SUCCESS =\r\n  'GET_ITEM_OPERATION_SETTING_SUCCESS'\r\nexport const UPDATE_ITEM_OPERATION_SETTING = 'UPDATE_ITEM_OPERATION_SETTING'\r\n\r\nexport const GET_MEASUREMENT_DATA_LIST = 'GET_MEASUREMENT_DATA_LIST'\r\nexport const GET_MEASUREMENT_DATA_LIST_SUCCESS =\r\n  'GET_MEASUREMENT_DATA_LIST_SUCCESS'\r\nexport const UPDATE_MEASUREMENT_DATA_LIST = 'UPDATE_MEASUREMENT_DATA_LIST'\r\nexport const DELETE_MEASUREMENT_DATA_LIST = 'DELETE_MEASUREMENT_DATA_LIST'\r\n\r\nexport const CREATE_WEIGHING = 'CREATE_WEIGHING'\r\nexport const UPDATE_WEIGHING = 'UPDATE_WEIGHING'\r\nexport const GET_MAX_SLIPNO = 'GET_MAX_SLIPNO'\r\n\r\nexport const GET_WEIGHING_OPERATION_SETTING = 'GET_WEIGHING_OPERATION_SETTING'\r\nexport const GET_WEIGHING_OPERATION_SETTING_SUCCESS =\r\n  'GET_WEIGHING_OPERATION_SETTING_SUCCESS'\r\nexport const UPDATE_WEIGHING_OPERATION_SETTING =\r\n  'UPDATE_WEIGHING_OPERATION_SETTING'\r\nexport const GET_SERIAL_PORTS = 'GET_SERIAL_PORTS'\r\n\r\nexport const GET_SUMMARY_REPORT = 'GET_SUMMARY_REPORT'\r\nexport const GET_SUMMARY_REPORT_SUCCESS = 'GET_SUMMARY_REPORT_SUCCESS'\r\n\r\nexport const GET_USB_DRIVES = 'GET_USB_DRIVES'\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  CREATE_WEIGHING,\r\n  UPDATE_WEIGHING,\r\n  GET_MAX_SLIPNO,\r\n  GET_STAYING_TRUCKS,\r\n  GET_STAYING_TRUCKS_SUCCESS,\r\n  UPDATE_STAYING_TRUCK,\r\n  DELETE_STAYING_TRUCK,\r\n  CREATE_STAYING_TRUCK,\r\n  GET_MEASUREMENT_DATA_LIST,\r\n  GET_MEASUREMENT_DATA_LIST_SUCCESS,\r\n  UPDATE_MEASUREMENT_DATA_LIST,\r\n  DELETE_MEASUREMENT_DATA_LIST,\r\n} from './action_types'\r\n\r\nexport const createWeighing = weighing => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.post(`/weighing/`, weighing)\r\n      dispatch({ type: CREATE_WEIGHING, payload: data })\r\n    } catch (error) {\r\n      toast.error('Cannot create Weighing. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateWeighing = weighingData => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(\r\n        `/weighing/${weighingData._id}`,\r\n        weighingData,\r\n      )\r\n      dispatch({ type: UPDATE_WEIGHING, payload: data })\r\n    } catch (error) {\r\n      toast.error('Cannot update Weighing. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const getMaxSlipNo = () => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.get('/weighing/getmaxslipno')\r\n      dispatch({ type: GET_MAX_SLIPNO, payload: data })\r\n    } catch (error) {\r\n      toast.error('Cannot load Max SlipNo. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\n// Staying trucks\r\nexport const getStayingTrucks = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_STAYING_TRUCKS })\r\n    try {\r\n      const { data } = await axios.get('/weighing/stayingtruck')\r\n      dispatch({ type: GET_STAYING_TRUCKS_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const createStayingTrucks = weighingData => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.post('/weighing/', weighingData)\r\n      dispatch({ type: CREATE_STAYING_TRUCK, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteStayingTruck = id => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.delete(`/weighing/${id}`)\r\n      dispatch({ type: DELETE_STAYING_TRUCK, payload: data })\r\n      toast.success('Staying truck deleted successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateStayingTruck = weighingData => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(\r\n        `/weighing/${weighingData._id}`,\r\n        weighingData,\r\n      )\r\n      dispatch({ type: UPDATE_STAYING_TRUCK, payload: data })\r\n      toast.success('Staying truck updated successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\n// Measurement Data List\r\nexport const getMeasurementDataList = date => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_MEASUREMENT_DATA_LIST })\r\n    try {\r\n      const { data } = await axios.get(`/weighing/getweighingbydate/${date}`)\r\n      dispatch({ type: GET_MEASUREMENT_DATA_LIST_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateMeasurementDataList = weightData => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(\r\n        `/weighing/${weightData._id}`,\r\n        weightData,\r\n      )\r\n      dispatch({ type: UPDATE_MEASUREMENT_DATA_LIST, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteMeassurementDataList = id => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.delete(`/weighing/${id}`)\r\n      dispatch({ type: DELETE_MEASUREMENT_DATA_LIST, payload: data })\r\n      toast.success('Measurement data deleted successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  GET_WEIGHING_OPERATION_SETTING,\r\n  GET_WEIGHING_OPERATION_SETTING_SUCCESS,\r\n  GET_SERIAL_PORTS,\r\n  UPDATE_WEIGHING_OPERATION_SETTING,\r\n} from '../action_types'\r\nimport socket from '../../helpers/socket'\r\n\r\nexport const getWeighingOperationSetting = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_WEIGHING_OPERATION_SETTING })\r\n    try {\r\n      const { data } = await axios.get('/setting/operationsetting')\r\n      dispatch({\r\n        type: GET_WEIGHING_OPERATION_SETTING_SUCCESS,\r\n        payload: data[0],\r\n      })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateWeighingOperationSetting = operationSetting => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(\r\n        `/setting/operationsetting/${operationSetting._id}`,\r\n        operationSetting,\r\n      )\r\n      dispatch({\r\n        type: UPDATE_WEIGHING_OPERATION_SETTING,\r\n        payload: data,\r\n      })\r\n      socket.emit('restartServer')\r\n      toast.success('Settings are updated successfully')\r\n      setTimeout(() => {\r\n        toast.info('Please refresh browser to apply changes!', {\r\n          autoClose: false,\r\n        })\r\n      }, 3000)\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const getSerialPorts = () => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.get('/setting/getserialports')\r\n      dispatch({ type: GET_SERIAL_PORTS, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\n\r\nexport const autoCompleteMasterData = async (e, item, state, setState) => {\r\n  const { name, value } = e.target\r\n  setState({ ...state, [name]: value })\r\n  if (value === '') {\r\n    setState({ ...state, [name]: value, [item]: '' })\r\n  } else {\r\n    try {\r\n      const { data } = await axios.get(`/${item}/${value}`)\r\n      if (data.length > 0) {\r\n        setState({\r\n          ...state,\r\n          [name]: value,\r\n          [item]: data[0].name,\r\n        })\r\n      }\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const autoCompleteTruckMasterData = async (\r\n  e,\r\n  state,\r\n  setState,\r\n  initialState,\r\n) => {\r\n  const { name, value } = e.target\r\n  setState({ ...state, [name]: value })\r\n  if (value === '') {\r\n    setState(initialState)\r\n  } else {\r\n    try {\r\n      const { data } = await axios.get(`/truck/${value}`)\r\n      if (data.length > 0) {\r\n        const { emptyWeight, ...truckMaster } = data[0]\r\n        setState({\r\n          ...state,\r\n          ...truckMaster,\r\n        })\r\n      }\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  GET_MEASUREMENT_DATA_LIST,\r\n  GET_MEASUREMENT_DATA_LIST_SUCCESS,\r\n  UPDATE_MEASUREMENT_DATA_LIST,\r\n  DELETE_MEASUREMENT_DATA_LIST,\r\n} from './action_types'\r\n\r\nexport const getMeasurementDataList = date => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_MEASUREMENT_DATA_LIST })\r\n    try {\r\n      const { data } = await axios.get(`/weighing/getweighingbydate/${date}`)\r\n      dispatch({ type: GET_MEASUREMENT_DATA_LIST_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateMeasurementDataList = weightData => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(\r\n        `/weighing/${weightData._id}`,\r\n        weightData,\r\n      )\r\n      dispatch({ type: UPDATE_MEASUREMENT_DATA_LIST, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteMeassurementDataList = id => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.delete(`/weighing/${id}`)\r\n      dispatch({ type: DELETE_MEASUREMENT_DATA_LIST, payload: data })\r\n      toast.success('Measurement data deleted successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { toast } from 'react-toastify'\r\nimport axios from 'axios'\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Button,\r\n  ModalFooter,\r\n  Table,\r\n} from 'reactstrap'\r\n\r\nconst DataModal = ({ modal, toggle, masterItem, onSelect }) => {\r\n  const [items, setItems] = useState([])\r\n\r\n  useEffect(() => {\r\n    const getItems = async () => {\r\n      try {\r\n        const { data } = await axios.get(`/${masterItem}`)\r\n        setItems(data)\r\n      } catch (error) {\r\n        toast.error('Cannot load master data. Please restart Raspberry Pi')\r\n      }\r\n    }\r\n\r\n    getItems()\r\n  }, [masterItem])\r\n\r\n  const onSelectClick = item => {\r\n    onSelect(item)\r\n    toggle()\r\n  }\r\n\r\n  return (\r\n    <Modal isOpen={modal} toggle={toggle}>\r\n      <ModalHeader toggle={toggle}>{masterItem} List</ModalHeader>\r\n      <ModalBody>\r\n        <div className=\"border\" style={{ height: '50vh', overflowY: 'auto' }}>\r\n          <Table bordered hover className=\"dataTable\">\r\n            <thead>\r\n              <tr>\r\n                <th>Code</th>\r\n                <th>Name</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {items.map(item => {\r\n                return (\r\n                  <tr key={item._id}>\r\n                    <td>{item.code}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>\r\n                      <Button\r\n                        className=\"mr-2\"\r\n                        color=\"warning\"\r\n                        size=\"sm\"\r\n                        onClick={() => onSelectClick(item)}\r\n                      >\r\n                        Select\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button className=\"ml-auto\" color=\"secondary\" onClick={toggle}>\r\n          Cancel\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nDataModal.propTypes = {\r\n  modal: PropTypes.bool.isRequired,\r\n  toggle: PropTypes.func.isRequired,\r\n  masterItem: PropTypes.string.isRequired,\r\n  onSelect: PropTypes.func.isRequired,\r\n}\r\nexport default DataModal\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap'\r\n\r\nimport socket from '../helpers/socket'\r\n\r\nconst PrintModal = ({ data, toggle, modal }) => {\r\n  const handlePrint = () => {\r\n    socket.emit('printVoucher', data)\r\n    toggle()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Printing Confirmation</ModalHeader>\r\n        <ModalBody>Do you want to print this weighing slip?</ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={handlePrint}>\r\n            Print\r\n          </Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\nPrintModal.propTypes = {\r\n  // eslint-disable-next-line react/forbid-prop-types\r\n  data: PropTypes.object.isRequired,\r\n  toggle: PropTypes.func.isRequired,\r\n  modal: PropTypes.bool.isRequired,\r\n}\r\nexport default PrintModal\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Alert } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faCheckCircle,\r\n  faExclamationCircle,\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport socket from '../../helpers/socket'\r\n\r\nconst IndicatorStatus = () => {\r\n  const [indicatorReady, setIndicatorReady] = useState(false)\r\n  const [printerReady, setPrinterReady] = useState(false)\r\n\r\n  useEffect(() => {\r\n    socket.on('readWeight', data => {\r\n      if (data.weight) {\r\n        setIndicatorReady(true)\r\n      } else {\r\n        setIndicatorReady(false)\r\n      }\r\n    })\r\n    socket.on('printerReady', isReady => {\r\n      if (isReady) {\r\n        setPrinterReady(true)\r\n      } else {\r\n        setPrinterReady(false)\r\n      }\r\n    })\r\n    socket.on('indicatorDisconnected', () => setIndicatorReady(false))\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {indicatorReady ? (\r\n        <Alert className=\"mt-2\" color=\"success\">\r\n          <FontAwesomeIcon icon={faCheckCircle} /> Indicator is ready to use!\r\n        </Alert>\r\n      ) : (\r\n        <Alert className=\"mt-2\" color=\"danger\">\r\n          <FontAwesomeIcon icon={faExclamationCircle} /> Indicator is not ready.\r\n          Please check again!\r\n        </Alert>\r\n      )}\r\n      {printerReady ? (\r\n        <Alert className=\"mt-2\" color=\"success\">\r\n          <FontAwesomeIcon icon={faCheckCircle} /> Printer is ready to use!\r\n        </Alert>\r\n      ) : (\r\n        <Alert className=\"mt-2\" color=\"danger\">\r\n          <FontAwesomeIcon icon={faExclamationCircle} /> Printer is not ready.\r\n          Please check again!\r\n        </Alert>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IndicatorStatus\r\n","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Col, Card, CardBody, CardHeader, Table, Button } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEdit } from '@fortawesome/free-solid-svg-icons'\r\nimport { getStayingTrucks } from '../../actions/weighingActions'\r\n\r\nconst StayingTrucks = ({\r\n  disableWeighing,\r\n  forceWeighing,\r\n  setIsUpdating,\r\n  updateWeighing,\r\n}) => {\r\n  const stayingTrucks = useSelector(state => state.weighing.stayingTrucks)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(getStayingTrucks())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <Col sm={12} xl={6}>\r\n      <Card>\r\n        <CardHeader>\r\n          <b>Staying trucks list</b>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Table bordered hover responsive className=\"dataTable\">\r\n            <thead>\r\n              <tr>\r\n                <th>Truck Number</th>\r\n                <th>Vendor</th>\r\n                {/* <th>Weight (kg)</th> */}\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {stayingTrucks.map(item => {\r\n                return (\r\n                  <tr key={item._id}>\r\n                    <td>{item.truckNumber}</td>\r\n                    <td>\r\n                      {item.vendorCode} - {item.vendor}\r\n                    </td>\r\n                    {/* <td>{item.grossWeight}</td> */}\r\n                    <td style={{ minWidth: '110px' }}>\r\n                      <Button\r\n                        className=\"mr-2\"\r\n                        color=\"warning\"\r\n                        size=\"sm\"\r\n                        disabled={disableWeighing && !forceWeighing}\r\n                        onClick={() => {\r\n                          setIsUpdating(true)\r\n                          updateWeighing(item)\r\n                        }}\r\n                      >\r\n                        <FontAwesomeIcon icon={faEdit} /> Select\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n      </Card>\r\n    </Col>\r\n  )\r\n}\r\nStayingTrucks.propTypes = {\r\n  disableWeighing: PropTypes.bool.isRequired,\r\n  forceWeighing: PropTypes.bool.isRequired,\r\n  setIsUpdating: PropTypes.func.isRequired,\r\n  updateWeighing: PropTypes.func.isRequired,\r\n}\r\nexport default StayingTrucks\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FormGroup, Label, Col, Input } from 'reactstrap'\r\n\r\nconst MasterDataInput = ({\r\n  display,\r\n  required,\r\n  labelName,\r\n  codeName,\r\n  codeValue,\r\n  dataName,\r\n  dataValue,\r\n  handleAutoComplete,\r\n  handleOnclick,\r\n  handleChange,\r\n}) => {\r\n  return (\r\n    <FormGroup\r\n      row\r\n      style={{\r\n        display: display ? '' : 'none',\r\n      }}\r\n    >\r\n      <Label for={dataName} sm={4}>\r\n        {labelName}:\r\n      </Label>\r\n      <Col xs={4} sm={3}>\r\n        <Input\r\n          type=\"text\"\r\n          name={codeName}\r\n          maxLength={3}\r\n          value={codeValue}\r\n          onChange={handleAutoComplete}\r\n        />\r\n      </Col>\r\n      <Col xs={8} sm={5}>\r\n        <Input\r\n          type=\"text\"\r\n          name={dataName}\r\n          required={!!required}\r\n          value={dataValue}\r\n          onClick={handleOnclick}\r\n          onChange={handleChange}\r\n        />\r\n      </Col>\r\n    </FormGroup>\r\n  )\r\n}\r\n\r\nMasterDataInput.propTypes = {\r\n  display: PropTypes.bool.isRequired,\r\n  required: PropTypes.bool.isRequired,\r\n  labelName: PropTypes.string.isRequired,\r\n  codeName: PropTypes.string.isRequired,\r\n  codeValue: PropTypes.string.isRequired,\r\n  dataName: PropTypes.string.isRequired,\r\n  dataValue: PropTypes.string.isRequired,\r\n  handleAutoComplete: PropTypes.func.isRequired,\r\n  handleOnclick: PropTypes.func.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default MasterDataInput\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Button,\r\n  Badge,\r\n} from 'reactstrap'\r\nimport { getItemsOperationSetting } from '../../actions/setting/itemOperationSettingActions'\r\nimport {\r\n  updateWeighing,\r\n  getMaxSlipNo,\r\n  updateStayingTruck,\r\n  createStayingTrucks,\r\n} from '../../actions/weighingActions'\r\nimport { getWeighingOperationSetting } from '../../actions/setting/weighingOperationSettingActions'\r\nimport {\r\n  autoCompleteMasterData,\r\n  autoCompleteTruckMasterData,\r\n} from '../../helpers/autoComplete'\r\nimport { updateMeasurementDataList } from '../../actions/measurementDataListActions'\r\nimport DataModal from '../MasterMenu/TruckMaster/DataModal'\r\nimport socket from '../../helpers/socket'\r\nimport PrintModal from '../../components/PrintModal'\r\nimport IndicatorStatus from './IndicatorStatus'\r\nimport StayingTrucks from './StayingTrucks'\r\nimport MasterDataInput from './MasterDataInput'\r\n\r\nconst initialState = {\r\n  _id: '',\r\n  slipNo: 0,\r\n  numberingType: 0,\r\n  truckNumber: '',\r\n  brandCode: '',\r\n  brand: '',\r\n  vendorCode: '',\r\n  vendor: '',\r\n  destinationCode: '',\r\n  destination: '',\r\n  otherCode: '',\r\n  other: '',\r\n  emptyWeight: null,\r\n  emptyTime: '',\r\n  grossWeight: 0,\r\n  grossTime: '',\r\n  correctionNet: 0,\r\n  edited: false,\r\n}\r\n\r\nconst Weighing = ({ location }) => {\r\n  const { updatingStayingTruck, updatingMeasurementData } = location\r\n  const [currentTime, setCurrentTime] = useState('')\r\n  const dispatch = useDispatch()\r\n  const [weightData, setWeightData] = useState(\r\n    (updatingStayingTruck && updatingStayingTruck.weighing) ||\r\n      (updatingMeasurementData && updatingMeasurementData.weighing) ||\r\n      initialState,\r\n  )\r\n  const [weight, setWeight] = useState(0)\r\n\r\n  // Declare things for modal Select Master data\r\n  const [openModal, setOpenModal] = useState(false)\r\n  const [printModal, setPrintModal] = useState(false)\r\n  const [printData, setPrintData] = useState({})\r\n  const [masterItem, setMasterItem] = useState('brand') // ===> This is a trick to prevent 404 not found error when load modal\r\n\r\n  const [isUpdating, setIsUpdating] = useState(false) // ==> For update weightData when Truck Out\r\n  const [isUpdatingStayingTruck, setIsUpdatingStayingTruck] = useState(false) // ==> For update item from Staying Truck List\r\n  const [isUpdatingMeasurementData, setIsUpdatingMeasurementData] = useState(\r\n    false,\r\n  ) // ==> For update item from Measurement Data List\r\n\r\n  // Declare settings\r\n  // Naming label of the Master items input\r\n  const itemOperation = useSelector(state => state.itemOperationSetting.payload)\r\n  const weighingOperationSetting = useSelector(\r\n    state => state.weighingOperationSetting.payload,\r\n  )\r\n  const slipNo = useSelector(state => state.weighing.maxSlipNo)\r\n  const [disableWeighing, setDisableWeighing] = useState(false)\r\n  const [forceWeighing, setForceWeighing] = useState(false)\r\n\r\n  // Get other items when mount component\r\n  useEffect(() => {\r\n    if (updatingStayingTruck) {\r\n      setIsUpdatingStayingTruck(true)\r\n    } else if (updatingMeasurementData) {\r\n      setIsUpdatingMeasurementData(true)\r\n    }\r\n  }, [updatingMeasurementData, updatingStayingTruck])\r\n\r\n  // Get realtime OS time\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      const now = new Date()\r\n      const hour = now.getHours()\r\n      const min = now.getMinutes()\r\n\r\n      setCurrentTime(\r\n        `${hour < 10 ? `0${hour}` : hour}:${min < 10 ? `0${min}` : min}`,\r\n      )\r\n    }, 1000)\r\n    return () => clearInterval(intervalId)\r\n  }, [])\r\n\r\n  // Get Staying trucks list from database\r\n  useEffect(() => {\r\n    dispatch(getItemsOperationSetting())\r\n    dispatch(getMaxSlipNo())\r\n    dispatch(getWeighingOperationSetting())\r\n  }, [dispatch])\r\n\r\n  socket.on('readWeight', data => {\r\n    setWeight(Number(data.weight).toFixed(0))\r\n  })\r\n\r\n  // Read Weight value from indicator\r\n  useEffect(() => {\r\n    setDisableWeighing(\r\n      weighingOperationSetting.weighingOperationSetting.weighingStartWeight >\r\n        weight,\r\n    )\r\n  }, [\r\n    weighingOperationSetting.weighingOperationSetting.weighingStartWeight,\r\n    weight,\r\n  ])\r\n\r\n  // Handle onChange when change input value\r\n  const handleChange = e => {\r\n    const { name, value } = e.target\r\n    setWeightData({ ...weightData, [name]: value })\r\n  }\r\n\r\n  // Handle onClick when click to input to select Master data\r\n  const handleOnClick = item => {\r\n    setMasterItem(item)\r\n    setOpenModal(!openModal)\r\n  }\r\n\r\n  // Select item to popup modal when click to master data input\r\n  const handleSelectItem = selectedItem => {\r\n    const { code, name } = selectedItem\r\n    const inputName = masterItem\r\n    const inputCode = `${masterItem}Code`\r\n    setWeightData({ ...weightData, [inputName]: name, [inputCode]: code })\r\n  }\r\n\r\n  // Handle button Cancel Weighing\r\n  const handleCancelWeighing = () => {\r\n    setDisableWeighing(\r\n      weighingOperationSetting.weighingOperationSetting.weighingStartWeight >\r\n        weight,\r\n    )\r\n    setForceWeighing(false)\r\n    setIsUpdating(false)\r\n    setWeightData(initialState)\r\n    setIsUpdating(false)\r\n    setIsUpdatingMeasurementData(false)\r\n    setIsUpdatingStayingTruck(false)\r\n  }\r\n\r\n  // Handle event for button Start/Complete Weighing\r\n  const handleCompleteWeighing = async e => {\r\n    e.preventDefault()\r\n\r\n    if (isUpdating) {\r\n      Object.assign(weightData, {\r\n        slipNo,\r\n        numberingType: weighingOperationSetting.slipNoStart,\r\n        emptyTime: currentTime,\r\n        emptyWeight: weight,\r\n        correctionNet: Number(\r\n          Math.abs(weight - weightData.grossWeight),\r\n        ).toFixed(0),\r\n      })\r\n      dispatch(updateWeighing(weightData))\r\n      setIsUpdating(false)\r\n      setPrintData(weightData)\r\n      setPrintModal(!printModal)\r\n    } else if (isUpdatingStayingTruck) {\r\n      dispatch(updateStayingTruck(weightData))\r\n      setIsUpdatingStayingTruck(false)\r\n    } else if (isUpdatingMeasurementData) {\r\n      Object.assign(weightData, {\r\n        edited: true,\r\n        correctionNet: Number(\r\n          Math.abs(weightData.emptyWeight - weightData.grossWeight),\r\n        ).toFixed(0),\r\n      })\r\n      dispatch(updateMeasurementDataList(weightData))\r\n      setIsUpdatingMeasurementData(false)\r\n    } else {\r\n      Object.assign(weightData, {\r\n        grossWeight: weight,\r\n        grossTime: currentTime,\r\n        emptyWeight: null,\r\n      })\r\n      dispatch(createStayingTrucks(weightData))\r\n    }\r\n    setWeightData(initialState)\r\n  }\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col sm={12} xl={6} className=\"mb-2\">\r\n          <Card>\r\n            <CardHeader>\r\n              <b>Weighing</b>\r\n              <h5\r\n                style={{ display: weightData.edited ? '' : 'none' }}\r\n                className=\"float-right m-0\"\r\n              >\r\n                <Badge color=\"warning\">Edited</Badge>\r\n              </h5>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Form onSubmit={handleCompleteWeighing}>\r\n                <fieldset disabled={disableWeighing && forceWeighing === false}>\r\n                  <FormGroup\r\n                    row\r\n                    style={{\r\n                      display: itemOperation.item1.display ? '' : 'none',\r\n                    }}\r\n                  >\r\n                    <Label for=\"truckNumber\" sm={4}>\r\n                      {itemOperation.item1.name}:\r\n                    </Label>\r\n                    <Col sm={3}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"truckNumber\"\r\n                        required={!!itemOperation.item1.require}\r\n                        value={weightData.truckNumber}\r\n                        onChange={e =>\r\n                          autoCompleteTruckMasterData(\r\n                            e,\r\n                            weightData,\r\n                            setWeightData,\r\n                            initialState,\r\n                          )\r\n                        }\r\n                      />\r\n                    </Col>\r\n                    <Label for=\"slipNo\" sm={3}>\r\n                      Slip No:\r\n                    </Label>\r\n                    <Col sm={2}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"slipNo\"\r\n                        disabled={\r\n                          !(isUpdatingMeasurementData || isUpdatingStayingTruck)\r\n                        }\r\n                        value={weightData.slipNo}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <MasterDataInput\r\n                    display={itemOperation.item2.display || false}\r\n                    required={itemOperation.item2.require || false}\r\n                    labelName={itemOperation.item2.name || ''}\r\n                    codeName=\"brandCode\"\r\n                    codeValue={weightData.brandCode}\r\n                    dataName=\"brand\"\r\n                    dataValue={weightData.brand}\r\n                    handleAutoComplete={e =>\r\n                      autoCompleteMasterData(\r\n                        e,\r\n                        'brand',\r\n                        weightData,\r\n                        setWeightData,\r\n                      )\r\n                    }\r\n                    handleOnclick={() => handleOnClick('brand')}\r\n                    handleChange={handleChange}\r\n                  />\r\n                  <MasterDataInput\r\n                    display={itemOperation.item3.display || false}\r\n                    required={itemOperation.item3.require || false}\r\n                    labelName={itemOperation.item3.name || ''}\r\n                    codeName=\"vendorCode\"\r\n                    codeValue={weightData.vendorCode}\r\n                    dataName=\"vendor\"\r\n                    dataValue={weightData.vendor}\r\n                    handleAutoComplete={e =>\r\n                      autoCompleteMasterData(\r\n                        e,\r\n                        'vendor',\r\n                        weightData,\r\n                        setWeightData,\r\n                      )\r\n                    }\r\n                    handleOnclick={() => handleOnClick('vendor')}\r\n                    handleChange={handleChange}\r\n                  />\r\n                  <MasterDataInput\r\n                    display={itemOperation.item4.display || false}\r\n                    required={itemOperation.item4.require || false}\r\n                    labelName={itemOperation.item4.name || ''}\r\n                    codeName=\"destinationCode\"\r\n                    codeValue={weightData.destinationCode}\r\n                    dataName=\"destination\"\r\n                    dataValue={weightData.destination}\r\n                    handleAutoComplete={e =>\r\n                      autoCompleteMasterData(\r\n                        e,\r\n                        'destination',\r\n                        weightData,\r\n                        setWeightData,\r\n                      )\r\n                    }\r\n                    handleOnclick={() => handleOnClick('destination')}\r\n                    handleChange={handleChange}\r\n                  />\r\n                  <MasterDataInput\r\n                    display={itemOperation.item5.display || false}\r\n                    required={itemOperation.item5.require || false}\r\n                    labelName={itemOperation.item5.name || ''}\r\n                    codeName=\"otherCode\"\r\n                    codeValue={weightData.otherCode}\r\n                    dataName=\"other\"\r\n                    dataValue={weightData.other}\r\n                    handleAutoComplete={e =>\r\n                      autoCompleteMasterData(\r\n                        e,\r\n                        'other',\r\n                        weightData,\r\n                        setWeightData,\r\n                      )\r\n                    }\r\n                    handleOnclick={() => handleOnClick('other')}\r\n                    handleChange={handleChange}\r\n                  />\r\n                  <FormGroup row>\r\n                    <Label for=\"grossWeight\" sm={4}>\r\n                      Truck In:\r\n                    </Label>\r\n                    <Col xs={4} sm={3}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"grossTime\"\r\n                        value={\r\n                          isUpdating ||\r\n                          isUpdatingStayingTruck ||\r\n                          isUpdatingStayingTruck\r\n                            ? weightData.grossTime\r\n                            : currentTime\r\n                        }\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                    <Col xs={8} sm={5}>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"grossWeight\"\r\n                        value={\r\n                          isUpdating ||\r\n                          isUpdatingStayingTruck ||\r\n                          isUpdatingMeasurementData\r\n                            ? weightData.grossWeight\r\n                            : weight\r\n                        }\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Label for=\"emptyWeight\" sm={4}>\r\n                      Truck Out:\r\n                    </Label>\r\n                    <Col xs={4} sm={3}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"emptyTime\"\r\n                        value={\r\n                          (isUpdating && currentTime) ||\r\n                          (isUpdatingStayingTruck && '') ||\r\n                          (isUpdatingMeasurementData && weightData.emptyTime) ||\r\n                          weightData.emptyTime\r\n                        }\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                    <Col xs={8} sm={5}>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"emptyWeight\"\r\n                        value={\r\n                          (isUpdating && weight) ||\r\n                          (isUpdatingStayingTruck && 0) ||\r\n                          (isUpdatingMeasurementData &&\r\n                            weightData.emptyWeight) ||\r\n                          0\r\n                        }\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Label for=\"correctionNet\" sm={4}>\r\n                      Net Weight:\r\n                    </Label>\r\n                    <Col sm={{ size: 5, offset: 3 }}>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"correctionNet\"\r\n                        value={\r\n                          (isUpdating &&\r\n                            Number(\r\n                              Math.abs(weight - weightData.grossWeight),\r\n                            ).toFixed(0)) ||\r\n                          (isUpdatingStayingTruck && 0) ||\r\n                          (isUpdatingMeasurementData &&\r\n                            Number(\r\n                              Math.abs(\r\n                                weightData.emptyWeight - weightData.grossWeight,\r\n                              ),\r\n                            ).toFixed(0)) ||\r\n                          0\r\n                        }\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                </fieldset>\r\n                <FormGroup row>\r\n                  <Col md={{ size: 6, offset: 4 }} xl={{ size: 6, offset: 4 }}>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className=\"mr-2\"\r\n                      style={{\r\n                        display:\r\n                          disableWeighing && !forceWeighing ? '' : 'none',\r\n                      }}\r\n                      onClick={() => {\r\n                        setDisableWeighing(false)\r\n                        setForceWeighing(true)\r\n                      }}\r\n                    >\r\n                      Force Weighing\r\n                    </Button>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      className=\"mr-2\"\r\n                      style={{\r\n                        display:\r\n                          disableWeighing && !forceWeighing ? 'none' : '',\r\n                      }}\r\n                    >\r\n                      {(isUpdating && 'Complete') ||\r\n                        ((isUpdatingStayingTruck ||\r\n                          isUpdatingMeasurementData) &&\r\n                          'Update') ||\r\n                        'Start'}\r\n                    </Button>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      className=\"mr-2\"\r\n                      style={{\r\n                        display: isUpdatingMeasurementData ? '' : 'none',\r\n                      }}\r\n                      onClick={() => {\r\n                        setPrintModal(!printModal)\r\n                        setPrintData(weightData)\r\n                      }}\r\n                    >\r\n                      Print\r\n                    </Button>\r\n                    <Button\r\n                      color=\"secondary\"\r\n                      onClick={handleCancelWeighing}\r\n                      style={{\r\n                        display:\r\n                          disableWeighing && !forceWeighing ? 'none' : '',\r\n                      }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </Col>\r\n                </FormGroup>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n          <IndicatorStatus />\r\n        </Col>\r\n\r\n        <StayingTrucks\r\n          disableWeighing={disableWeighing}\r\n          forceWeighing={forceWeighing}\r\n          setIsUpdating={setIsUpdating}\r\n          updateWeighing={item => setWeightData(item)}\r\n        />\r\n      </Row>\r\n\r\n      {/* Data modal */}\r\n      <DataModal\r\n        modal={openModal}\r\n        toggle={() => setOpenModal(!openModal)}\r\n        masterItem={masterItem}\r\n        onSelect={handleSelectItem}\r\n      />\r\n      <PrintModal\r\n        modal={printModal}\r\n        toggle={() => setPrintModal(!printModal)}\r\n        data={printData}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nWeighing.propTypes = {\r\n  location: PropTypes.shape({\r\n    pathname: PropTypes.string.isRequired,\r\n    updatingStayingTruck: PropTypes.shape({\r\n      weighing: PropTypes.shape(initialState),\r\n    }),\r\n    updatingMeasurementData: PropTypes.shape({\r\n      weighing: PropTypes.shape(initialState),\r\n    }),\r\n  }).isRequired,\r\n}\r\n\r\nexport default Weighing\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap'\r\n\r\nfunction DeleteModal({ deleteItem, toggle, modal }) {\r\n  const handleDelete = () => {\r\n    deleteItem()\r\n    toggle()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Delete Confirmation</ModalHeader>\r\n        <ModalBody>Are you sure you want to delete this item?</ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"danger\" onClick={handleDelete}>\r\n            Delete\r\n          </Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nDeleteModal.propTypes = {\r\n  deleteItem: PropTypes.func.isRequired,\r\n  toggle: PropTypes.func.isRequired,\r\n  modal: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default DeleteModal\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Button,\r\n  Spinner,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Input,\r\n} from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTable, faTrash, faEdit } from '@fortawesome/free-solid-svg-icons'\r\nimport {\r\n  getStayingTrucks,\r\n  deleteStayingTruck,\r\n} from '../actions/weighingActions'\r\nimport { getItemsOperationSetting } from '../actions/setting/itemOperationSettingActions'\r\n\r\nimport DeleteModal from '../components/DeleteModal'\r\n\r\nconst StayingTruckList = () => {\r\n  const items = useSelector(state => state.weighing.stayingTrucks)\r\n  const isLoading = useSelector(state => state.weighing.isLoading)\r\n  const itemOperation = useSelector(state => state.itemOperationSetting.payload)\r\n  const dispatch = useDispatch()\r\n  const [openDeleteModal, setOpenDeleteModal] = useState(false)\r\n  const [currentItem, setCurrentItem] = useState({})\r\n  const [search, setSearch] = useState('')\r\n\r\n  useEffect(() => {\r\n    dispatch(getStayingTrucks())\r\n    dispatch(getItemsOperationSetting())\r\n  }, [dispatch])\r\n\r\n  const fildteredItems = items.filter(item => {\r\n    return item.truckNumber.toLowerCase().indexOf(search.toLowerCase()) !== -1\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col sm={12}>\r\n          <Card>\r\n            <CardHeader>\r\n              <FontAwesomeIcon icon={faTable} /> Staying Truck List\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Col\r\n                sm={{ size: 6, offset: 6 }}\r\n                xl={{ size: 4, offset: 8 }}\r\n                className=\"d-flex mb-2 p-0\"\r\n              >\r\n                <Input\r\n                  className=\"ml-auto\"\r\n                  type=\"text\"\r\n                  name=\"search\"\r\n                  placeholder=\"Search for truck number...\"\r\n                  value={search}\r\n                  onChange={e => setSearch(e.target.value)}\r\n                />\r\n              </Col>\r\n              {isLoading ? (\r\n                <div className=\"animated fadeIn pt-3 text-center\">\r\n                  <Spinner color=\"secondary\" />\r\n                </div>\r\n              ) : (\r\n                <div style={{ height: '65vh', overflowY: 'auto' }}>\r\n                  <Table bordered responsive className=\"dataTable\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>{itemOperation.item1.name}</th>\r\n                        <th>{itemOperation.item2.name}</th>\r\n                        <th>{itemOperation.item3.name}</th>\r\n                        <th>{itemOperation.item4.name}</th>\r\n                        <th>{itemOperation.item5.name}</th>\r\n                        <th>Time</th>\r\n                        <th>Weight (kg)</th>\r\n                        <th>Actions</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {fildteredItems.map(item => {\r\n                        return (\r\n                          <tr key={item._id}>\r\n                            <td style={{ minWidth: '110px' }}>\r\n                              {item.truckNumber}\r\n                            </td>\r\n                            <td>\r\n                              {item.brandCode} - {item.brand}\r\n                            </td>\r\n                            <td>\r\n                              {item.vendorCode} - {item.vendor}\r\n                            </td>\r\n                            <td>\r\n                              {item.destinationCode} - {item.destination}\r\n                            </td>\r\n                            <td>\r\n                              {item.otherCode} - {item.other}\r\n                            </td>\r\n                            <td>{item.grossTime}</td>\r\n                            <td>{item.grossWeight}</td>\r\n                            <td>\r\n                              <div\r\n                                style={{ minWidth: '170px', minHeight: '100%' }}\r\n                                className=\"d-flex\"\r\n                              >\r\n                                <Button\r\n                                  tag={Link}\r\n                                  to={{\r\n                                    pathname: '/',\r\n                                    updatingStayingTruck: { weighing: item },\r\n                                  }}\r\n                                  color=\"warning\"\r\n                                  className=\"mr-2\"\r\n                                  size=\"sm\"\r\n                                >\r\n                                  <FontAwesomeIcon icon={faEdit} /> Update\r\n                                </Button>\r\n                                <Button\r\n                                  color=\"danger\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => {\r\n                                    setOpenDeleteModal(!openDeleteModal)\r\n                                    setCurrentItem(item)\r\n                                  }}\r\n                                >\r\n                                  <FontAwesomeIcon icon={faTrash} /> Delete\r\n                                </Button>\r\n                              </div>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      })}\r\n                    </tbody>\r\n                  </Table>\r\n                </div>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <DeleteModal\r\n        modal={openDeleteModal}\r\n        toggle={() => setOpenDeleteModal(!openDeleteModal)}\r\n        currentItem={currentItem}\r\n        deleteItem={() => dispatch(deleteStayingTruck(currentItem._id))}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StayingTruckList\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  GET_BRANDS_MASTER,\r\n  GET_BRANDS_MASTER_SUCCESS,\r\n  CREATE_BRAND_MASTER,\r\n  UPDATE_BRAND_MASTER,\r\n  DELETE_BRAND_MASTER,\r\n} from '../action_types'\r\n\r\nexport const getBrands = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_BRANDS_MASTER })\r\n    try {\r\n      const { data } = await axios.get('/brand')\r\n      dispatch({ type: GET_BRANDS_MASTER_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const createBrand = brand => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.post('/brand', brand)\r\n      dispatch({ type: CREATE_BRAND_MASTER, payload: data })\r\n      toast.success('New brand created successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteBrand = id => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.delete(`/brand/${id}`)\r\n      dispatch({ type: DELETE_BRAND_MASTER, payload: data })\r\n      toast.success('Brand deleted successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateBrand = brand => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(`/brand/${brand._id}`, brand)\r\n      dispatch({ type: UPDATE_BRAND_MASTER, payload: data })\r\n      toast.success('Brand updated successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Form,\r\n  Col,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from 'reactstrap'\r\n\r\nconst initialState = { _id: '', code: '', name: '' }\r\n\r\nconst FormModal = ({\r\n  isEditing,\r\n  currentItem,\r\n  createItem,\r\n  updateItem,\r\n  toggle,\r\n  itemName,\r\n  modal,\r\n}) => {\r\n  const [item, setItem] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    setItem(currentItem)\r\n  }, [currentItem])\r\n\r\n  const validateForm = () => {\r\n    return item.code.length > 0 && item.name.length > 0\r\n  }\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target\r\n    setItem({ ...item, [name]: value })\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    if (!isEditing) {\r\n      createItem(item)\r\n    } else {\r\n      updateItem(item)\r\n    }\r\n    setItem(initialState)\r\n    toggle()\r\n  }\r\n\r\n  return (\r\n    <Modal isOpen={modal} toggle={toggle}>\r\n      <ModalHeader toggle={toggle}>\r\n        {isEditing ? 'Update ' : 'Create New '}\r\n        {itemName}\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Form>\r\n          <FormGroup row>\r\n            <Label for=\"code\" sm={2}>\r\n              Code:\r\n            </Label>\r\n            <Col sm={8}>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"code\"\r\n                maxLength={3}\r\n                value={item.code}\r\n                onChange={handleChange}\r\n                placeholder=\"Code\"\r\n              />\r\n            </Col>\r\n          </FormGroup>\r\n          <FormGroup row>\r\n            <Label for=\"name\" sm={2}>\r\n              Name:\r\n            </Label>\r\n            <Col sm={8}>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={item.name}\r\n                onChange={handleChange}\r\n                placeholder=\"Name\"\r\n                onKeyPress={e => {\r\n                  if (e.key === 'Enter') handleSubmit(e)\r\n                }}\r\n              />\r\n            </Col>\r\n          </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button\r\n          color=\"primary\"\r\n          className=\"mr-2\"\r\n          onClick={handleSubmit}\r\n          disabled={!validateForm()}\r\n        >\r\n          {isEditing ? 'Update' : 'Create'}\r\n        </Button>\r\n        <Button color=\"secondary\" onClick={() => toggle()}>\r\n          Cancel\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nFormModal.propTypes = {\r\n  isEditing: PropTypes.bool.isRequired,\r\n  currentItem: PropTypes.shape({\r\n    _id: PropTypes.string,\r\n    code: PropTypes.string,\r\n    name: PropTypes.string,\r\n  }).isRequired,\r\n  toggle: PropTypes.func.isRequired,\r\n  modal: PropTypes.bool.isRequired,\r\n  createItem: PropTypes.func.isRequired,\r\n  updateItem: PropTypes.func.isRequired,\r\n  itemName: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default FormModal\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Button } from 'reactstrap'\r\nimport * as FileSaver from 'file-saver'\r\nimport * as XLSX from 'xlsx'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDownload } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst ExportCSV = ({ csvData, fileName }) => {\r\n  const fileType =\r\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n  const fileExtension = '.csv'\r\n\r\n  const exportToCSV = () => {\r\n    const ws = XLSX.utils.json_to_sheet(csvData)\r\n    const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'csv', type: 'array' })\r\n    const data = new Blob([excelBuffer], { type: fileType })\r\n    FileSaver.saveAs(data, fileName + fileExtension)\r\n  }\r\n\r\n  return (\r\n    <Button color=\"success\" className=\"mb-2\" onClick={exportToCSV}>\r\n      <FontAwesomeIcon icon={faDownload} /> Export CSV\r\n    </Button>\r\n  )\r\n}\r\n\r\nExportCSV.propTypes = {\r\n  csvData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      _id: '',\r\n      code: '',\r\n      name: '',\r\n    }),\r\n  ).isRequired,\r\n  fileName: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default ExportCSV\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Button,\r\n  Spinner,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Input,\r\n} from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faTable,\r\n  faPlusCircle,\r\n  faTrash,\r\n  faEdit,\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport DeleteModal from '../../../components/DeleteModal'\r\nimport FormModal from './FormModal'\r\nimport ExportCSV from '../../../components/ExportCSV'\r\n\r\nconst initialState = { _id: '', code: '', name: '' }\r\n\r\nconst CustomTable = ({\r\n  items,\r\n  isLoading,\r\n  dispatch,\r\n  tableName,\r\n  getItems,\r\n  createItem,\r\n  updateItem,\r\n  deleteItem,\r\n}) => {\r\n  const [currentItem, setCurrentItem] = useState(initialState)\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [deleteModal, setDeleteModal] = useState(false)\r\n  const [formModal, setFormModal] = useState(false)\r\n  const [search, setSearch] = useState('')\r\n\r\n  useEffect(() => {\r\n    dispatch(getItems())\r\n  }, [dispatch, getItems])\r\n\r\n  const handleCreate = () => {\r\n    setIsEditing(false)\r\n    setCurrentItem(initialState)\r\n    setFormModal(!formModal)\r\n  }\r\n\r\n  const handleUpdate = item => {\r\n    setIsEditing(true)\r\n    setCurrentItem(item)\r\n    setFormModal(!formModal)\r\n  }\r\n\r\n  const handleDelete = item => {\r\n    setCurrentItem(item)\r\n    setDeleteModal(!deleteModal)\r\n  }\r\n\r\n  const fildteredItems = items.filter(item => {\r\n    return item.name.toLowerCase().indexOf(search.toLowerCase()) !== -1\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col sm={12}>\r\n          <Card>\r\n            <CardHeader>\r\n              <FontAwesomeIcon icon={faTable} /> {tableName} Data\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Row>\r\n                <Col xs={12} lg={6}>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    className=\"mb-2 mr-2\"\r\n                    onClick={handleCreate}\r\n                  >\r\n                    <FontAwesomeIcon icon={faPlusCircle} /> Create\r\n                  </Button>\r\n                  <ExportCSV csvData={items} fileName={tableName} />\r\n                </Col>\r\n                <Col sm={12} md={12} lg={6} xl={{ size: 4, offset: 2 }}>\r\n                  <Input\r\n                    className=\"mb-2\"\r\n                    type=\"text\"\r\n                    name=\"search\"\r\n                    placeholder=\"Search for name...\"\r\n                    value={search}\r\n                    onChange={e => setSearch(e.target.value)}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              {isLoading ? (\r\n                <div className=\"animated fadeIn pt-3 text-center\">\r\n                  <Spinner color=\"secondary\" />\r\n                </div>\r\n              ) : (\r\n                <div style={{ height: '65vh', overflowY: 'auto' }}>\r\n                  <Table bordered hover responsive className=\"dataTable\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Code</th>\r\n                        <th>Name</th>\r\n                        <th>Actions</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {fildteredItems.map(item => {\r\n                        return (\r\n                          <tr key={item._id}>\r\n                            <td>{item.code}</td>\r\n                            <td>{item.name}</td>\r\n                            <td>\r\n                              <div className=\"d-flex\">\r\n                                <Button\r\n                                  className=\"mr-2\"\r\n                                  color=\"warning\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => handleUpdate(item)}\r\n                                >\r\n                                  <FontAwesomeIcon icon={faEdit} /> Update\r\n                                </Button>\r\n                                <Button\r\n                                  color=\"danger\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => handleDelete(item)}\r\n                                >\r\n                                  <FontAwesomeIcon icon={faTrash} /> Delete\r\n                                </Button>\r\n                              </div>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      })}\r\n                    </tbody>\r\n                  </Table>\r\n                </div>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Declare all modals here */}\r\n      <FormModal\r\n        modal={formModal}\r\n        toggle={() => setFormModal(!formModal)}\r\n        itemName={tableName}\r\n        currentItem={currentItem}\r\n        isEditing={isEditing}\r\n        createItem={item => dispatch(createItem(item))}\r\n        updateItem={item => {\r\n          dispatch(updateItem(item))\r\n          setIsEditing(false)\r\n        }}\r\n      />\r\n      <DeleteModal\r\n        modal={deleteModal}\r\n        toggle={() => setDeleteModal(!deleteModal)}\r\n        currentItem={currentItem}\r\n        deleteItem={() => dispatch(deleteItem(currentItem._id))}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nCustomTable.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.shape(initialState)).isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  dispatch: PropTypes.func.isRequired,\r\n  tableName: PropTypes.string.isRequired,\r\n  getItems: PropTypes.func.isRequired,\r\n  createItem: PropTypes.func.isRequired,\r\n  updateItem: PropTypes.func.isRequired,\r\n  deleteItem: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default CustomTable\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  getBrands,\r\n  createBrand,\r\n  updateBrand,\r\n  deleteBrand,\r\n} from '../../actions/master/brandActions'\r\nimport CustomTable from './common/CustomTable'\r\n\r\nconst BrandMaster = () => {\r\n  const items = useSelector(state => state.brands.payload)\r\n  const isLoading = useSelector(state => state.brands.isLoading)\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <CustomTable\r\n      items={items}\r\n      isLoading={isLoading}\r\n      dispatch={dispatch}\r\n      tableName=\"Brand Master\"\r\n      getItems={getBrands}\r\n      createItem={createBrand}\r\n      updateItem={updateBrand}\r\n      deleteItem={deleteBrand}\r\n    />\r\n  )\r\n}\r\n\r\nexport default BrandMaster\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n  Form,\r\n  Col,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from 'reactstrap'\r\nimport { autoCompleteMasterData } from '../../../helpers/autoComplete'\r\nimport DataModal from './DataModal'\r\n\r\nconst initialState = {\r\n  truckNumber: '',\r\n  brand: '',\r\n  brandCode: '',\r\n  vendor: '',\r\n  vendorCode: '',\r\n  destination: '',\r\n  destinationCode: '',\r\n  other: '',\r\n  otherCode: '',\r\n  emptyWeight: 0,\r\n  maximumWeight: 0,\r\n}\r\nconst TruckFormModal = ({\r\n  currentTruck,\r\n  isEditing,\r\n  updateTruck,\r\n  createTruck,\r\n  toggle,\r\n  modal,\r\n}) => {\r\n  const [truckItem, setTruckItem] = useState(initialState)\r\n  const [openDataModal, setOpenDataModal] = useState(false)\r\n  const [masterItem, setMasterItem] = useState('brand') // This is a trick to prevent 404 not found error when load this Data Modal\r\n\r\n  useEffect(() => {\r\n    setTruckItem(currentTruck)\r\n  }, [currentTruck])\r\n\r\n  const validateForm = () => {\r\n    return truckItem.truckNumber.length > 0\r\n  }\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target\r\n    setTruckItem({ ...truckItem, [name]: value })\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    if (!isEditing) {\r\n      createTruck(truckItem)\r\n    } else {\r\n      updateTruck(truckItem)\r\n    }\r\n    setTruckItem(initialState)\r\n    toggle()\r\n  }\r\n\r\n  const handleOnClick = item => {\r\n    setMasterItem(item)\r\n    setOpenDataModal(!openDataModal)\r\n  }\r\n\r\n  const handleSelectItem = selectedItem => {\r\n    const { code, name } = selectedItem\r\n    const itemName = masterItem // Ex: brand\r\n    const itemCode = `${masterItem}Code` // Ex: brandCode\r\n    setTruckItem({ ...truckItem, [itemName]: name, [itemCode]: code })\r\n  }\r\n\r\n  const handleKeyPress = e => {\r\n    if (e.key === 'Enter') handleSubmit(e)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>\r\n          {isEditing ? 'Update Truck Master' : 'Create New Truck Master'}\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup row>\r\n              <Label for=\"truckNumber\" sm={4}>\r\n                Truck Number:\r\n              </Label>\r\n              <Col sm={4}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"truckNumber\"\r\n                  value={truckItem.truckNumber}\r\n                  onChange={handleChange}\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Label for=\"brand\" sm={4}>\r\n                Brand Name:\r\n              </Label>\r\n              <Col xs={4} sm={3}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"brandCode\"\r\n                  value={truckItem.brandCode}\r\n                  maxLength=\"3\"\r\n                  onChange={e =>\r\n                    autoCompleteMasterData(e, 'brand', truckItem, setTruckItem)\r\n                  }\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n              <Col xs={8} sm={5}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"brand\"\r\n                  value={truckItem.brand}\r\n                  onClick={() => handleOnClick('brand')}\r\n                  onChange={handleChange}\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Label for=\"vendor\" sm={4}>\r\n                Vendor:\r\n              </Label>\r\n              <Col xs={4} sm={3}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"vendorCode\"\r\n                  value={truckItem.vendorCode}\r\n                  maxLength=\"3\"\r\n                  onChange={e =>\r\n                    autoCompleteMasterData(e, 'vendor', truckItem, setTruckItem)\r\n                  }\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n              <Col xs={8} sm={5}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"vendor\"\r\n                  value={truckItem.vendor}\r\n                  onClick={() => handleOnClick('vendor')}\r\n                  onChange={handleChange}\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Label for=\"destination\" sm={4}>\r\n                Destination:\r\n              </Label>\r\n              <Col xs={4} sm={3}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"destinationCode\"\r\n                  maxLength=\"3\"\r\n                  value={truckItem.destinationCode}\r\n                  onChange={e =>\r\n                    autoCompleteMasterData(\r\n                      e,\r\n                      'destination',\r\n                      truckItem,\r\n                      setTruckItem,\r\n                    )\r\n                  }\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n              <Col xs={8} sm={5}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"destination\"\r\n                  value={truckItem.destination}\r\n                  onClick={() => handleOnClick('destination')}\r\n                  onChange={handleChange}\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Label for=\"other\" sm={4}>\r\n                Other:\r\n              </Label>\r\n              <Col xs={4} sm={3}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"otherCode\"\r\n                  maxLength=\"3\"\r\n                  value={truckItem.otherCode}\r\n                  onChange={e =>\r\n                    autoCompleteMasterData(e, 'other', truckItem, setTruckItem)\r\n                  }\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n              <Col xs={8} sm={5}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"other\"\r\n                  value={truckItem.other}\r\n                  onClick={() => handleOnClick('other')}\r\n                  onChange={handleChange}\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Label for=\"emptyWeight\" sm={5}>\r\n                Empty Weight:\r\n              </Label>\r\n              <Col sm={7}>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"emptyWeight\"\r\n                  value={truckItem.emptyWeight}\r\n                  onChange={handleChange}\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Label for=\"maximumWeight\" sm={5}>\r\n                Maximum Weight:\r\n              </Label>\r\n              <Col sm={7}>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"maximumWeight\"\r\n                  value={truckItem.maximumWeight}\r\n                  onChange={handleChange}\r\n                  onKeyPress={handleKeyPress}\r\n                />\r\n              </Col>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"mr-2\"\r\n            onClick={handleSubmit}\r\n            disabled={!validateForm()}\r\n          >\r\n            {isEditing ? 'Update' : 'Create'}\r\n          </Button>\r\n          <Button color=\"secondary\" onClick={() => toggle()}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n\r\n      {/* Data openDataModal */}\r\n      <DataModal\r\n        modal={openDataModal}\r\n        toggle={() => setOpenDataModal(!openDataModal)}\r\n        masterItem={masterItem}\r\n        onSelect={handleSelectItem}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nTruckFormModal.propTypes = {\r\n  currentTruck: PropTypes.shape(initialState).isRequired,\r\n  isEditing: PropTypes.bool.isRequired,\r\n  updateTruck: PropTypes.func.isRequired,\r\n  createTruck: PropTypes.func.isRequired,\r\n  toggle: PropTypes.func.isRequired,\r\n  modal: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default TruckFormModal\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Button,\r\n  Spinner,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Input,\r\n} from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faTable,\r\n  faPlusCircle,\r\n  faTrash,\r\n  faEdit,\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport {\r\n  getTrucks,\r\n  createTruck,\r\n  updateTruck,\r\n  deleteTruck,\r\n} from '../../../actions/master/truckActions'\r\nimport DeleteModal from '../../../components/DeleteModal'\r\nimport TruckFormModal from './TruckFormModal'\r\nimport ExportCSV from '../../../components/ExportCSV'\r\n\r\nconst initialState = {\r\n  _id: '',\r\n  truckNumber: '',\r\n  brand: '',\r\n  brandCode: '',\r\n  vendor: '',\r\n  vendorCode: '',\r\n  destination: '',\r\n  destinationCode: '',\r\n  other: '',\r\n  otherCode: '',\r\n  emptyWeight: 0,\r\n  maximumWeight: 0,\r\n}\r\nconst TruckMaster = () => {\r\n  const items = useSelector(state => state.trucks.payload)\r\n  const isLoading = useSelector(state => state.trucks.isLoading)\r\n  const dispatch = useDispatch()\r\n  const [currentTruck, setCurrentItem] = useState(initialState)\r\n  const [isEditing, setIsEditing] = useState(false)\r\n  const [deleteModal, setDeleteModal] = useState(false)\r\n  const [formModal, setFormModal] = useState(false)\r\n  const [search, setSearch] = useState('')\r\n\r\n  useEffect(() => {\r\n    dispatch(getTrucks())\r\n  }, [dispatch])\r\n\r\n  const fildteredItems = items.filter(item => {\r\n    return item.truckNumber.toLowerCase().indexOf(search.toLowerCase()) !== -1\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col sm={12}>\r\n          <Card>\r\n            <CardHeader>\r\n              <FontAwesomeIcon icon={faTable} /> Truck Master Data\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Row>\r\n                <Col xs={12} lg={6}>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    className=\"mb-2 mr-2\"\r\n                    onClick={() => {\r\n                      setIsEditing(false)\r\n                      setFormModal(!formModal)\r\n                    }}\r\n                  >\r\n                    <FontAwesomeIcon icon={faPlusCircle} /> Create\r\n                  </Button>\r\n                  <ExportCSV csvData={items} fileName=\"Truck Master\" />\r\n                </Col>\r\n                <Col sm={12} md={12} lg={6} xl={{ size: 4, offset: 2 }}>\r\n                  <Input\r\n                    className=\"mb-2\"\r\n                    type=\"text\"\r\n                    name=\"search\"\r\n                    placeholder=\"Search for truck number...\"\r\n                    value={search}\r\n                    onChange={e => setSearch(e.target.value)}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              {isLoading ? (\r\n                <div className=\"animated fadeIn pt-3 text-center\">\r\n                  <Spinner color=\"secondary\" />\r\n                </div>\r\n              ) : (\r\n                <Table bordered responsive className=\"dataTable\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Truck Number</th>\r\n                      <th>Brand Name</th>\r\n                      <th>Vendor</th>\r\n                      <th>Destination</th>\r\n                      <th>Other</th>\r\n                      <th>Empty Weight (kg)</th>\r\n                      <th>Maximum Weight (kg)</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {fildteredItems.map(item => {\r\n                      return (\r\n                        <tr key={item._id}>\r\n                          <td style={{ minWidth: '110px' }}>\r\n                            {item.truckNumber}\r\n                          </td>\r\n                          <td>\r\n                            {item.brandCode} - {item.brand}\r\n                          </td>\r\n                          <td>\r\n                            {item.vendorCode} - {item.vendor}\r\n                          </td>\r\n                          <td>\r\n                            {item.destinationCode} - {item.destination}\r\n                          </td>\r\n                          <td>\r\n                            {item.otherCode} - {item.other}\r\n                          </td>\r\n                          <td>{item.emptyWeight}</td>\r\n                          <td>{item.maximumWeight}</td>\r\n                          <td>\r\n                            <div\r\n                              style={{ minWidth: '170px', minHeight: '100%' }}\r\n                              className=\"d-flex\"\r\n                            >\r\n                              <Button\r\n                                className=\"mr-2\"\r\n                                color=\"warning\"\r\n                                size=\"sm\"\r\n                                onClick={() => {\r\n                                  setIsEditing(true)\r\n                                  setCurrentItem(item)\r\n                                  setFormModal(!formModal)\r\n                                }}\r\n                              >\r\n                                <FontAwesomeIcon icon={faEdit} /> Update\r\n                              </Button>\r\n                              <Button\r\n                                color=\"danger\"\r\n                                size=\"sm\"\r\n                                onClick={() => {\r\n                                  setDeleteModal(!deleteModal)\r\n                                  setCurrentItem(item)\r\n                                }}\r\n                              >\r\n                                <FontAwesomeIcon icon={faTrash} /> Delete\r\n                              </Button>\r\n                            </div>\r\n                          </td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Declare all modals here */}\r\n      <TruckFormModal\r\n        modal={formModal}\r\n        toggle={() => setFormModal(!formModal)}\r\n        itemName=\"Truck\"\r\n        createTruck={truck => dispatch(createTruck(truck))}\r\n        updateTruck={truck => {\r\n          dispatch(updateTruck(truck))\r\n          setIsEditing(false)\r\n        }}\r\n        currentTruck={currentTruck}\r\n        isEditing={isEditing}\r\n        setIsEditing={setIsEditing}\r\n      />\r\n      <DeleteModal\r\n        modal={deleteModal}\r\n        toggle={() => setDeleteModal(!deleteModal)}\r\n        currentItem={currentTruck}\r\n        deleteItem={() => dispatch(deleteTruck(currentTruck._id))}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TruckMaster\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  GET_TRUCKS_MASTER,\r\n  GET_TRUCKS_MASTER_SUCCESS,\r\n  CREATE_TRUCK_MASTER,\r\n  UPDATE_TRUCK_MASTER,\r\n  DELETE_TRUCK_MASTER,\r\n} from '../action_types'\r\n\r\nexport const getTrucks = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_TRUCKS_MASTER })\r\n    try {\r\n      const { data } = await axios.get('/truck')\r\n      dispatch({ type: GET_TRUCKS_MASTER_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const createTruck = truck => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.post('/truck', truck)\r\n      dispatch({ type: CREATE_TRUCK_MASTER, payload: data })\r\n      toast.success('New truck created successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteTruck = id => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.delete(`/truck/${id}`)\r\n      dispatch({ type: DELETE_TRUCK_MASTER, payload: data })\r\n      toast.success('Truck deleted successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateTruck = truck => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(`/truck/${truck._id}`, truck)\r\n      dispatch({ type: UPDATE_TRUCK_MASTER, payload: data })\r\n      toast.success('Truck updated successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  GET_DESTINATIONS_MASTER,\r\n  GET_DESTINATIONS_MASTER_SUCCESS,\r\n  CREATE_DESTINATION_MASTER,\r\n  UPDATE_DESTINATION_MASTER,\r\n  DELETE_DESTINATION_MASTER,\r\n} from '../action_types'\r\n\r\nexport const getDestinations = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_DESTINATIONS_MASTER })\r\n    try {\r\n      const { data } = await axios.get('/destination')\r\n      dispatch({ type: GET_DESTINATIONS_MASTER_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const createDestination = destination => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.post('/destination', destination)\r\n      dispatch({ type: CREATE_DESTINATION_MASTER, payload: data })\r\n      toast.success('New destination created successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteDestination = id => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.delete(`/destination/${id}`)\r\n      dispatch({ type: DELETE_DESTINATION_MASTER, payload: data })\r\n      toast.success('Destination deleted successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateDestination = destination => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(\r\n        `/destination/${destination._id}`,\r\n        destination,\r\n      )\r\n      dispatch({ type: UPDATE_DESTINATION_MASTER, payload: data })\r\n      toast.success('Destination updated successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  getDestinations,\r\n  createDestination,\r\n  updateDestination,\r\n  deleteDestination,\r\n} from '../../actions/master/destinationActions'\r\nimport CustomTable from './common/CustomTable'\r\n\r\nconst DestinationMaster = () => {\r\n  const items = useSelector(state => state.destinations.payload)\r\n  const isLoading = useSelector(state => state.destinations.isLoading)\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <CustomTable\r\n      items={items}\r\n      isLoading={isLoading}\r\n      dispatch={dispatch}\r\n      tableName=\"Destination Master\"\r\n      getItems={getDestinations}\r\n      createItem={createDestination}\r\n      updateItem={updateDestination}\r\n      deleteItem={deleteDestination}\r\n    />\r\n  )\r\n}\r\n\r\nexport default DestinationMaster\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  GET_OTHERS_MASTER,\r\n  GET_OTHERS_MASTER_SUCCESS,\r\n  CREATE_OTHER_MASTER,\r\n  UPDATE_OTHER_MASTER,\r\n  DELETE_OTHER_MASTER,\r\n} from '../action_types'\r\n\r\nexport const getOthers = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_OTHERS_MASTER })\r\n    try {\r\n      const { data } = await axios.get('/other')\r\n      dispatch({ type: GET_OTHERS_MASTER_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const createOther = other => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.post('/other', other)\r\n      dispatch({ type: CREATE_OTHER_MASTER, payload: data })\r\n      toast.success('New other created successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteOther = id => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.delete(`/other/${id}`)\r\n      dispatch({ type: DELETE_OTHER_MASTER, payload: data })\r\n      toast.success('Other deleted successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateOther = other => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(`/other/${other._id}`, other)\r\n      dispatch({ type: UPDATE_OTHER_MASTER, payload: data })\r\n      toast.success('Other updated successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  getOthers,\r\n  createOther,\r\n  updateOther,\r\n  deleteOther,\r\n} from '../../actions/master/otherActions'\r\nimport CustomTable from './common/CustomTable'\r\n\r\nconst OtherMaster = () => {\r\n  const items = useSelector(state => state.others.payload)\r\n  const isLoading = useSelector(state => state.others.isLoading)\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <CustomTable\r\n      items={items}\r\n      isLoading={isLoading}\r\n      dispatch={dispatch}\r\n      tableName=\"Other Master\"\r\n      getItems={getOthers}\r\n      createItem={createOther}\r\n      updateItem={updateOther}\r\n      deleteItem={deleteOther}\r\n    />\r\n  )\r\n}\r\n\r\nexport default OtherMaster\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  GET_VENDORS_MASTER,\r\n  GET_VENDORS_MASTER_SUCCESS,\r\n  CREATE_VENDOR_MASTER,\r\n  UPDATE_VENDOR_MASTER,\r\n  DELETE_VENDOR_MASTER,\r\n} from '../action_types'\r\n\r\nexport const getVendors = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_VENDORS_MASTER })\r\n    try {\r\n      const { data } = await axios.get('/vendor')\r\n      dispatch({ type: GET_VENDORS_MASTER_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const createVendor = vendor => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.post('/vendor', vendor)\r\n      dispatch({ type: CREATE_VENDOR_MASTER, payload: data })\r\n      toast.success('New vendor created successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const deleteVendor = id => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.delete(`/vendor/${id}`)\r\n      dispatch({ type: DELETE_VENDOR_MASTER, payload: data })\r\n      toast.success('Vendor deleted successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateVendor = vendor => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.put(`/vendor/${vendor._id}`, vendor)\r\n      dispatch({ type: UPDATE_VENDOR_MASTER, payload: data })\r\n      toast.success('Vendor updated successfully!')\r\n    } catch (error) {\r\n      toast.error('There are some errors. Please try again!')\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  getVendors,\r\n  createVendor,\r\n  updateVendor,\r\n  deleteVendor,\r\n} from '../../actions/master/vendorActions'\r\nimport CustomTable from './common/CustomTable'\r\n\r\nconst VendorMaster = () => {\r\n  const items = useSelector(state => state.vendors.payload)\r\n  const isLoading = useSelector(state => state.vendors.isLoading)\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <CustomTable\r\n      items={items}\r\n      isLoading={isLoading}\r\n      dispatch={dispatch}\r\n      tableName=\"Vendor Master\"\r\n      getItems={getVendors}\r\n      createItem={createVendor}\r\n      updateItem={updateVendor}\r\n      deleteItem={deleteVendor}\r\n    />\r\n  )\r\n}\r\n\r\nexport default VendorMaster\r\n","const printPDF = () => {\r\n  const tableToPrint = document.getElementById('printableTable')\r\n  const withCSS = `<style type=\"text/css\"> \r\n                            table { border-collapse: collapse; }\r\n                            table th, table td { border: 0.5px solid #000; padding: 0.5rem; margin: 0 } \r\n                            .fa-sort { display: none }\r\n                            @media print {\r\n                                .noprint {display: none;}\r\n                            }\r\n                   </style>`\r\n  const printWindow = window.open('')\r\n  printWindow.document.write(tableToPrint.outerHTML + withCSS)\r\n  printWindow.print()\r\n  printWindow.close()\r\n}\r\n\r\nexport default printPDF\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport {\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Spinner,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Label,\r\n  Button,\r\n} from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faTable,\r\n  faEdit,\r\n  faTrash,\r\n  faPrint,\r\n} from '@fortawesome/free-solid-svg-icons'\r\n\r\n// Configure datepicker using react-widgets\r\nimport moment from 'moment'\r\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker'\r\nimport momentLocalizer from 'react-widgets-moment'\r\nimport { getItemsOperationSetting } from '../actions/setting/itemOperationSettingActions'\r\nimport {\r\n  getMeasurementDataList,\r\n  deleteMeassurementDataList,\r\n} from '../actions/weighingActions'\r\nimport DeleteModal from '../components/DeleteModal'\r\nimport ExportCSV from '../components/ExportCSV'\r\nimport 'react-widgets/dist/css/react-widgets.css'\r\nimport printPDF from '../helpers/printPDF'\r\n\r\nmomentLocalizer(moment)\r\n\r\nfunction MeasurementDataList() {\r\n  const isLoading = useSelector(state => state.weighing.isLoading)\r\n  const items = useSelector(state => state.weighing.measurementData)\r\n  const itemOperation = useSelector(state => state.itemOperationSetting.payload)\r\n  const dispatch = useDispatch()\r\n  const [date, setDate] = useState(new Date())\r\n  const [openDeleteModal, setOpenDeleteModal] = useState(false)\r\n  const [currentItem, setCurrentItem] = useState({})\r\n\r\n  useEffect(() => {\r\n    dispatch(getMeasurementDataList(date))\r\n    dispatch(getItemsOperationSetting())\r\n  }, [date, dispatch])\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardHeader>\r\n          <FontAwesomeIcon icon={faTable} /> Measurement Data List\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Label for=\"date\" className=\"col-lg-2 col-xl-2 mt-2 mr-2\">\r\n              Select Date:\r\n            </Label>\r\n            <DateTimePicker\r\n              className=\"col-md-6 col-lg-4 col-xl-3 mb-4\"\r\n              time={false}\r\n              value={date}\r\n              onChange={value => setDate(value)}\r\n            />\r\n            <Col className=\"col-md-12 col-lg-5\">\r\n              <Button\r\n                color=\"primary\"\r\n                className=\"mb-2 mr-2\"\r\n                onClick={() => printPDF()}\r\n              >\r\n                <FontAwesomeIcon icon={faPrint} /> Print\r\n              </Button>\r\n              <ExportCSV csvData={items} fileName=\"Measurement Data List\" />\r\n            </Col>\r\n          </Row>\r\n          {isLoading ? (\r\n            <div className=\"animated fadeIn pt-3 text-center\">\r\n              <Spinner color=\"secondary\" />\r\n            </div>\r\n          ) : (\r\n            <div style={{ height: '65vh', overflowY: 'auto' }}>\r\n              <Table\r\n                bordered\r\n                responsive\r\n                className=\"dataTable\"\r\n                id=\"printableTable\"\r\n              >\r\n                <thead>\r\n                  <tr>\r\n                    <th>Time</th>\r\n                    <th>No</th>\r\n                    <th>{itemOperation.item1.name}</th>\r\n                    <th>{itemOperation.item2.name}</th>\r\n                    <th>{itemOperation.item3.name}</th>\r\n                    <th>{itemOperation.item4.name}</th>\r\n                    <th>{itemOperation.item5.name}</th>\r\n                    <th>Truck In (kg)</th>\r\n                    <th>Truck Out (kg)</th>\r\n                    <th>Net Weight (kg)</th>\r\n                    <th className=\"noprint\">Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {items.map(item => {\r\n                    return (\r\n                      <tr key={item._id}>\r\n                        <td>{item.emptyTime}</td>\r\n                        <td>{item.slipNo}</td>\r\n                        <td style={{ minWidth: '110px' }}>\r\n                          {item.truckNumber}\r\n                        </td>\r\n                        <td>\r\n                          {item.brandCode} - {item.brand}\r\n                        </td>\r\n                        <td>\r\n                          {item.vendorCode} - {item.vendor}\r\n                        </td>\r\n                        <td>\r\n                          {item.destinationCode} - {item.destination}\r\n                        </td>\r\n                        <td>\r\n                          {item.otherCode} - {item.other}\r\n                        </td>\r\n                        <td>{item.emptyWeight}</td>\r\n                        <td>{item.grossWeight}</td>\r\n                        <td>{item.correctionNet}</td>\r\n                        <td className=\"noprint\">\r\n                          <div\r\n                            style={{ minWidth: '170px', minHeight: '100%' }}\r\n                            className=\"d-flex\"\r\n                          >\r\n                            <Button\r\n                              tag={Link}\r\n                              to={{\r\n                                pathname: '/',\r\n                                updatingMeasurementData: { weighing: item },\r\n                              }}\r\n                              color=\"warning\"\r\n                              className=\"mr-2\"\r\n                              size=\"sm\"\r\n                            >\r\n                              <FontAwesomeIcon icon={faEdit} /> Update\r\n                            </Button>\r\n                            <Button\r\n                              color=\"danger\"\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                setOpenDeleteModal(!openDeleteModal)\r\n                                setCurrentItem(item)\r\n                              }}\r\n                            >\r\n                              <FontAwesomeIcon icon={faTrash} /> Delete\r\n                            </Button>\r\n                          </div>\r\n                        </td>\r\n                      </tr>\r\n                    )\r\n                  })}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          )}\r\n        </CardBody>\r\n      </Card>\r\n      {/* Declare all modals here */}\r\n      <DeleteModal\r\n        modal={openDeleteModal}\r\n        toggle={() => setOpenDeleteModal(!openDeleteModal)}\r\n        currentItem={currentItem}\r\n        deleteItem={() => dispatch(deleteMeassurementDataList(currentItem._id))}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MeasurementDataList\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Spinner,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Label,\r\n  Input,\r\n  Button,\r\n} from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTable, faPrint, faSort } from '@fortawesome/free-solid-svg-icons'\r\nimport '../components/style.css'\r\n// Configure datepicker using react-widgets\r\nimport moment from 'moment'\r\nimport DateTimePicker from 'react-widgets/lib/DateTimePicker'\r\nimport momentLocalizer from 'react-widgets-moment'\r\nimport { sortUp, sortDown } from '../helpers/sorting'\r\nimport { getSummaryReport } from '../actions/summaryReportActions'\r\nimport 'react-widgets/dist/css/react-widgets.css'\r\nimport printPDF from '../helpers/printPDF'\r\n\r\nmomentLocalizer(moment)\r\n\r\nconst SummaryReport = () => {\r\n  const isLoading = useSelector(state => state.summaryReport.isLoading)\r\n  const data = useSelector(state => state.summaryReport.payload)\r\n  const dispatch = useDispatch()\r\n  const [items, setItems] = useState([])\r\n  const [fromDate, setFromDate] = useState(new Date())\r\n  const [toDate, setToDate] = useState(new Date())\r\n  const [firstItem, setFirstItem] = useState('')\r\n  const [firstItemHead, setFirstItemHead] = useState('')\r\n  const [secondItem, setSecondItem] = useState('')\r\n  const [secondtemHead, setSecondItemHead] = useState('')\r\n  const [bindData, setBindData] = useState(false)\r\n  const [isSortingUp, setIsSortingUp] = useState(true)\r\n\r\n  useEffect(() => {\r\n    switch (firstItem) {\r\n      case 'brand':\r\n        setFirstItemHead('Brand')\r\n        break\r\n      case 'vendor':\r\n        setFirstItemHead('Vendor')\r\n        break\r\n      case 'destination':\r\n        setFirstItemHead('Destination')\r\n        break\r\n      case 'other':\r\n        setFirstItemHead('Other')\r\n        break\r\n      default:\r\n        setFirstItemHead('Truck Number')\r\n    }\r\n  }, [firstItem])\r\n\r\n  useEffect(() => {\r\n    switch (secondItem) {\r\n      case 'brand':\r\n        setSecondItemHead('Brand')\r\n        break\r\n      case 'vendor':\r\n        setSecondItemHead('Vendor')\r\n        break\r\n      case 'destination':\r\n        setSecondItemHead('Destination')\r\n        break\r\n      case 'other':\r\n        setSecondItemHead('Other')\r\n        break\r\n      default:\r\n        setSecondItemHead('Truck Number')\r\n    }\r\n  }, [secondItem])\r\n\r\n  useEffect(() => {\r\n    setItems(data)\r\n  }, [data])\r\n\r\n  const handleFilter = () => {\r\n    setBindData(true)\r\n    dispatch(getSummaryReport(firstItem, secondItem, fromDate, toDate))\r\n  }\r\n\r\n  const handleSortUp = (key1, key2) => {\r\n    const temp = [...items]\r\n    temp.sort(sortUp(key1, key2))\r\n    setItems(temp)\r\n  }\r\n\r\n  const handleSortDown = (key1, key2) => {\r\n    const temp = [...items]\r\n    temp.sort(sortDown(key1, key2))\r\n    setItems(temp)\r\n  }\r\n\r\n  const hanldleSort = (key1, key2) => {\r\n    setIsSortingUp(!isSortingUp)\r\n    if (key2 === '' || key2 === undefined) {\r\n      if (isSortingUp) {\r\n        handleSortUp(key1)\r\n      } else {\r\n        handleSortDown(key1)\r\n      }\r\n    } else if (isSortingUp) {\r\n      handleSortUp(key1, key2)\r\n    } else {\r\n      handleSortDown(key1, key2)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardHeader>\r\n          <FontAwesomeIcon icon={faTable} /> Summary Report\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col md={12} lg={6} xl={3} className=\"mb-2\">\r\n              <Label for=\"date\">From date:</Label>\r\n              <DateTimePicker\r\n                time={false}\r\n                value={fromDate}\r\n                onChange={value => setFromDate(value)}\r\n              />\r\n            </Col>\r\n            <Col md={12} lg={6} xl={3}>\r\n              <Label for=\"date\">To date:</Label>\r\n              <DateTimePicker\r\n                time={false}\r\n                value={toDate}\r\n                onChange={value => setToDate(value)}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Label for=\"date\" className=\"mt-2\">\r\n            Filter by:\r\n          </Label>\r\n          <Row>\r\n            <Col md={12} lg={6} xl={3}>\r\n              <Input\r\n                className=\"mr-2 mb-2\"\r\n                type=\"select\"\r\n                name=\"select\"\r\n                onChange={e => {\r\n                  setFirstItem(e.target.value)\r\n                  setBindData(false)\r\n                }}\r\n              >\r\n                <option value=\"\">-- Select item 1 --</option>\r\n                <option value=\"truckNumber\">Truck number</option>\r\n                <option value=\"brand\">Brand</option>\r\n                <option value=\"vendor\">Vendor</option>\r\n                <option value=\"destination\">Destination</option>\r\n                <option value=\"other\">Other</option>\r\n              </Input>\r\n            </Col>\r\n            <Col md={12} lg={6} xl={3}>\r\n              <Input\r\n                className=\"mb-2\"\r\n                type=\"select\"\r\n                name=\"select\"\r\n                disabled={firstItem === ''}\r\n                onChange={e => {\r\n                  setSecondItem(e.target.value)\r\n                  setBindData(false)\r\n                }}\r\n              >\r\n                <option value=\"\">-- Select item 2 --</option>\r\n                <option value=\"truckNumber\">Truck number</option>\r\n                <option value=\"brand\">Brand</option>\r\n                <option value=\"vendor\">Vendor</option>\r\n                <option value=\"destination\">Destination</option>\r\n                <option value=\"other\">Other</option>\r\n              </Input>\r\n            </Col>\r\n            <Col md={12} xl={3}>\r\n              <Button color=\"primary\" onClick={handleFilter}>\r\n                Filter\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                className=\"ml-2 px-4\"\r\n                onClick={() => printPDF()}\r\n              >\r\n                <FontAwesomeIcon icon={faPrint} /> Print\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          {isLoading && (\r\n            <div className=\"animated fadeIn pt-3 text-center\">\r\n              <Spinner color=\"secondary\" />\r\n            </div>\r\n          )}\r\n          {!isLoading &&\r\n            bindData &&\r\n            (secondItem === '' ? (\r\n              <div id=\"printableTable\" className=\"mt-2\">\r\n                <Table bordered responsive className=\"dataTable\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th onClick={() => hanldleSort('_id')}>\r\n                        {firstItemHead} <FontAwesomeIcon icon={faSort} />\r\n                      </th>\r\n                      <th onClick={() => hanldleSort('totalCount')}>\r\n                        Times <FontAwesomeIcon icon={faSort} />\r\n                      </th>\r\n                      <th onClick={() => hanldleSort('totalWeight')}>\r\n                        Net weight (kg) <FontAwesomeIcon icon={faSort} />\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {items.map((item, index) => {\r\n                      return (\r\n                        <tr key={index}>\r\n                          <td style={{ minWidth: '110px' }}>\r\n                            {(firstItem === 'truckNumber' && '') ||\r\n                              (firstItem === 'brand' &&\r\n                                `${item.brandCode} - `) ||\r\n                              (firstItem === 'vendor' &&\r\n                                `${item.vendorCode} - `) ||\r\n                              (firstItem === 'destination' &&\r\n                                `${item.destinationCode} - `) ||\r\n                              (firstItem === 'other' &&\r\n                                `${item.otherCode} - `)}{' '}\r\n                            {item._id}\r\n                          </td>\r\n                          <td>{item.totalCount}</td>\r\n                          <td>{item.totalWeight}</td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              </div>\r\n            ) : (\r\n              <div id=\"printableTable\" className=\"mt-2\">\r\n                <Table bordered responsive className=\"dataTable\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th onClick={() => hanldleSort('_id', 'firstItem')}>\r\n                        {firstItemHead} <FontAwesomeIcon icon={faSort} />\r\n                      </th>\r\n                      <th onClick={() => hanldleSort('_id', 'secondItem')}>\r\n                        {secondtemHead} <FontAwesomeIcon icon={faSort} />\r\n                      </th>\r\n                      <th onClick={() => hanldleSort('totalCount')}>\r\n                        Times <FontAwesomeIcon icon={faSort} />\r\n                      </th>\r\n                      <th onClick={() => hanldleSort('totalWeight')}>\r\n                        Net weight (kg) <FontAwesomeIcon icon={faSort} />\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {items.map((item, index) => {\r\n                      return (\r\n                        <tr key={index}>\r\n                          <td style={{ minWidth: '110px' }}>\r\n                            {(firstItem === 'truckNumber' && '') ||\r\n                              (firstItem === 'brand' &&\r\n                                `${item.brandCode} - `) ||\r\n                              (firstItem === 'vendor' &&\r\n                                `${item.vendorCode} - `) ||\r\n                              (firstItem === 'destination' &&\r\n                                `${item.destinationCode} - `) ||\r\n                              (firstItem === 'other' && `${item.otherCode} - `)}\r\n                            {item._id.firstItem}\r\n                          </td>\r\n                          <td style={{ minWidth: '110px' }}>\r\n                            {(secondItem === 'truckNumber' && '') ||\r\n                              (secondItem === 'brand' &&\r\n                                `${item.brandCode} - `) ||\r\n                              (secondItem === 'vendor' &&\r\n                                `${item.vendorCode} - `) ||\r\n                              (secondItem === 'destination' &&\r\n                                `${item.destinationCode} - `) ||\r\n                              (secondItem === 'other' &&\r\n                                `${item.otherCode} - `)}\r\n                            {item._id.secondItem}\r\n                          </td>\r\n                          <td>{item.totalCount}</td>\r\n                          <td>{item.totalWeight}</td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              </div>\r\n            ))}\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SummaryReport\r\n","export const sortUp = (firstKey, secondKey) => {\r\n  if (secondKey === '' || secondKey === undefined) {\r\n    return (a, b) => {\r\n      const x =\r\n        typeof a[firstKey] === 'string'\r\n          ? a[firstKey].toString().toLowerCase()\r\n          : parseFloat(a[firstKey])\r\n      const y =\r\n        typeof b[firstKey] === 'string'\r\n          ? b[firstKey].toString().toLowerCase()\r\n          : parseFloat(b[firstKey])\r\n      if (x < y) {\r\n        return -1\r\n      }\r\n      if (x > y) {\r\n        return 1\r\n      }\r\n      return 0\r\n    }\r\n  }\r\n  return (a, b) => {\r\n    const x =\r\n      typeof a[firstKey][secondKey] === 'string'\r\n        ? a[firstKey][secondKey].toString().toLowerCase()\r\n        : parseFloat(a[firstKey][secondKey])\r\n    const y =\r\n      typeof b[firstKey][secondKey] === 'string'\r\n        ? b[firstKey][secondKey].toString().toLowerCase()\r\n        : parseFloat(b[firstKey][secondKey])\r\n    if (x < y) {\r\n      return -1\r\n    }\r\n    if (x > y) {\r\n      return 1\r\n    }\r\n    return 0\r\n  }\r\n}\r\n\r\nexport const sortDown = (firstKey, secondKey) => {\r\n  if (secondKey === '' || secondKey === undefined) {\r\n    return (a, b) => {\r\n      const x =\r\n        typeof a[firstKey] === 'string'\r\n          ? a[firstKey].toString().toLowerCase()\r\n          : parseFloat(a[firstKey])\r\n      const y =\r\n        typeof b[firstKey] === 'string'\r\n          ? b[firstKey].toString().toLowerCase()\r\n          : parseFloat(b[firstKey])\r\n      if (x < y) {\r\n        return 1\r\n      }\r\n      if (x > y) {\r\n        return -1\r\n      }\r\n      return 0\r\n    }\r\n  }\r\n  return (a, b) => {\r\n    const x =\r\n      typeof a[firstKey][secondKey] === 'string'\r\n        ? a[firstKey][secondKey].toString().toLowerCase()\r\n        : parseFloat(a[firstKey][secondKey])\r\n    const y =\r\n      typeof b[firstKey][secondKey] === 'string'\r\n        ? b[firstKey][secondKey].toString().toLowerCase()\r\n        : parseFloat(b[firstKey][secondKey])\r\n    if (x < y) {\r\n      return 1\r\n    }\r\n    if (x > y) {\r\n      return -1\r\n    }\r\n    return 0\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport { GET_SUMMARY_REPORT, GET_SUMMARY_REPORT_SUCCESS } from './action_types'\r\n\r\nexport const getSummaryReport = (firstItem, secondItem, fromDate, toDate) => {\r\n  return async dispatch => {\r\n    dispatch({ type: GET_SUMMARY_REPORT })\r\n    try {\r\n      let baseUrl = ''\r\n      if (secondItem !== '') {\r\n        baseUrl = `/weighing/report/${\r\n          firstItem === '' ? 'truckNumber' : firstItem\r\n        }/${secondItem}/${fromDate.toISOString()}/${toDate.toISOString()}`\r\n      } else {\r\n        baseUrl = `/weighing/report/${\r\n          firstItem === '' ? 'truckNumber' : firstItem\r\n        }/${fromDate.toISOString()}/${toDate.toISOString()}`\r\n      }\r\n      const { data } = await axios.get(baseUrl)\r\n      dispatch({ type: GET_SUMMARY_REPORT_SUCCESS, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const test = () => {}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Button,\r\n} from 'reactstrap'\r\nimport { getItemsOperationSetting } from '../actions/setting/itemOperationSettingActions'\r\nimport { createWeighing, getMaxSlipNo } from '../actions/weighingActions'\r\nimport {\r\n  autoCompleteMasterData,\r\n  autoCompleteTruckMasterData,\r\n} from '../helpers/autoComplete'\r\nimport DataModal from './MasterMenu/TruckMaster/DataModal'\r\n\r\nconst initialState = {\r\n  _id: '',\r\n  slipNo: 0,\r\n  numberingType: 0,\r\n  truckNumber: '',\r\n  brandCode: '',\r\n  brand: '',\r\n  vendorCode: '',\r\n  vendor: '',\r\n  destinationCode: '',\r\n  destination: '',\r\n  otherCode: '',\r\n  other: '',\r\n  emptyWeight: 0,\r\n  emptyTime: '',\r\n  grossWeight: 0,\r\n  grossTime: '',\r\n  correctionNet: 0,\r\n}\r\nconst ManualWeighing = () => {\r\n  const now = new Date()\r\n  const [currentTime] = useState(`${now.getHours()}:${now.getMinutes()}`)\r\n  const itemOperation = useSelector(state => state.itemOperationSetting.payload)\r\n  const maxSlipNo = useSelector(state => state.weighing.maxSlipNo)\r\n  const dispatch = useDispatch()\r\n  const [weightData, setWeightData] = useState(initialState)\r\n\r\n  // Declare things for openModal Select Master data\r\n  const [openModal, setOpenModal] = useState(false)\r\n  const [masterItem, setMasterItem] = useState('brand') // ===> This is a trick to prevent 404 not found error when load openModal\r\n\r\n  useEffect(() => {\r\n    dispatch(getItemsOperationSetting())\r\n    dispatch(getMaxSlipNo())\r\n  }, [dispatch])\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target\r\n    setWeightData({ ...weightData, [name]: value })\r\n  }\r\n\r\n  // Handle onClick when click to input to select Master data\r\n  const handleOnClick = item => {\r\n    setMasterItem(item)\r\n    setOpenModal(!openModal)\r\n  }\r\n\r\n  const handleSelectItem = selectedItem => {\r\n    const { code, name } = selectedItem\r\n    const inputName = masterItem\r\n    const inputCode = `${masterItem}Code`\r\n    setWeightData({ ...weightData, [inputName]: name, [inputCode]: code })\r\n  }\r\n\r\n  // Handle event for button Start/Complete Weighing\r\n  const handleCompleteWeighing = async e => {\r\n    e.preventDefault()\r\n    if (weightData.emptyTime === '') {\r\n      Object.assign(weightData, { emptyTime: currentTime })\r\n    }\r\n    const netWeight = Number(\r\n      Math.abs(weightData.emptyWeight - weightData.grossWeight),\r\n    ).toFixed(0)\r\n    Object.assign(weightData, {\r\n      correctionNet: netWeight,\r\n      slipNo: maxSlipNo,\r\n    })\r\n    dispatch(createWeighing(weightData))\r\n    setWeightData(initialState)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col sm={12} xl={6}>\r\n          <Card>\r\n            <CardHeader>\r\n              <b>Weighing</b>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Form onSubmit={handleCompleteWeighing}>\r\n                <fieldset>\r\n                  <FormGroup\r\n                    row\r\n                    style={{\r\n                      display: itemOperation.item1.display ? '' : 'none',\r\n                    }}\r\n                  >\r\n                    <Label for=\"truckNumber\" sm={4}>\r\n                      {itemOperation.item1.name}:\r\n                    </Label>\r\n                    <Col sm={3}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"truckNumber\"\r\n                        required={!!itemOperation.item1.require}\r\n                        value={weightData.truckNumber}\r\n                        onChange={e =>\r\n                          autoCompleteTruckMasterData(\r\n                            e,\r\n                            weightData,\r\n                            setWeightData,\r\n                            initialState,\r\n                          )\r\n                        }\r\n                      />\r\n                    </Col>\r\n                    <Label for=\"slipNo\" sm={3}>\r\n                      Slip No:\r\n                    </Label>\r\n                    <Col sm={2}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"slipNo\"\r\n                        value={weightData.slipNo}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup\r\n                    row\r\n                    style={{\r\n                      display: itemOperation.item2.display ? '' : 'none',\r\n                    }}\r\n                  >\r\n                    <Label for=\"brand\" sm={4}>\r\n                      {itemOperation.item2.name}:\r\n                    </Label>\r\n                    <Col xs={4} sm={3}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"brandCode\"\r\n                        value={weightData.brandCode}\r\n                        onChange={e =>\r\n                          autoCompleteMasterData(\r\n                            e,\r\n                            'brand',\r\n                            weightData,\r\n                            setWeightData,\r\n                          )\r\n                        }\r\n                      />\r\n                    </Col>\r\n                    <Col xs={8} sm={5}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"brand\"\r\n                        required={!!itemOperation.item2.require}\r\n                        value={weightData.brand}\r\n                        onClick={() => handleOnClick('brand')}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup\r\n                    row\r\n                    style={{\r\n                      display: itemOperation.item3.display ? '' : 'none',\r\n                    }}\r\n                  >\r\n                    <Label for=\"vendor\" sm={4}>\r\n                      {itemOperation.item3.name}:\r\n                    </Label>\r\n                    <Col xs={4} sm={3}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"vendorCode\"\r\n                        value={weightData.vendorCode}\r\n                        onChange={e =>\r\n                          autoCompleteMasterData(\r\n                            e,\r\n                            'vendor',\r\n                            weightData,\r\n                            setWeightData,\r\n                          )\r\n                        }\r\n                      />\r\n                    </Col>\r\n                    <Col xs={8} sm={5}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"vendor\"\r\n                        required={!!itemOperation.item3.require}\r\n                        value={weightData.vendor}\r\n                        onClick={() => handleOnClick('vendor')}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup\r\n                    row\r\n                    style={{\r\n                      display: itemOperation.item4.display ? '' : 'none',\r\n                    }}\r\n                  >\r\n                    <Label for=\"destination\" sm={4}>\r\n                      {itemOperation.item4.name}:\r\n                    </Label>\r\n                    <Col xs={4} sm={3}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"destinationCode\"\r\n                        value={weightData.destinationCode}\r\n                        onChange={e =>\r\n                          autoCompleteMasterData(\r\n                            e,\r\n                            'destination',\r\n                            weightData,\r\n                            setWeightData,\r\n                          )\r\n                        }\r\n                      />\r\n                    </Col>\r\n                    <Col xs={8} sm={5}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"destination\"\r\n                        required={!!itemOperation.item4.require}\r\n                        value={weightData.destination}\r\n                        onClick={() => handleOnClick('destination')}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup\r\n                    row\r\n                    style={{\r\n                      display: itemOperation.item5.display ? '' : 'none',\r\n                    }}\r\n                  >\r\n                    <Label for=\"other\" sm={4}>\r\n                      {itemOperation.item5.name}:\r\n                    </Label>\r\n                    <Col xs={4} sm={3}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"otherCode\"\r\n                        value={weightData.otherCode}\r\n                        onChange={e =>\r\n                          autoCompleteMasterData(\r\n                            e,\r\n                            'other',\r\n                            weightData,\r\n                            setWeightData,\r\n                          )\r\n                        }\r\n                      />\r\n                    </Col>\r\n                    <Col xs={8} sm={5}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"other\"\r\n                        required={!!itemOperation.item5.require}\r\n                        value={weightData.other}\r\n                        onClick={() => handleOnClick('other')}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  {/* <FormGroup row style={{ display: itemOperation.item6.display ? '' : 'none' }}>\r\n                                        <Label for=\"other_2\" sm={2}>{itemOperation.item6.name}:</Label>\r\n                                        <Col sm={8}>\r\n                                            <Input type=\"text\" name=\"other_2\"\r\n                                                value={weightData.other}\r\n                                                onClick={(e) => handleOnClick(e, 'Other_2')}\r\n                                                onChange={handleChange} />\r\n                                        </Col>\r\n                                    </FormGroup> */}\r\n                  <FormGroup row>\r\n                    <Label for=\"grossWeight\" sm={4}>\r\n                      Truck In:\r\n                    </Label>\r\n                    <Col xs={4} sm={3}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"grossTime\"\r\n                        value={weightData.grossTime}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                    <Col xs={8} sm={5}>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"grossWeight\"\r\n                        value={weightData.grossWeight}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Label for=\"emptyWeight\" sm={4}>\r\n                      Truck Out:\r\n                    </Label>\r\n                    <Col xs={4} sm={3}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"emptyTime\"\r\n                        value={weightData.emptyTime}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                    <Col xs={8} sm={5}>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"emptyWeight\"\r\n                        value={weightData.emptyWeight}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Label for=\"correctionNet\" sm={4}>\r\n                      Net Weight:\r\n                    </Label>\r\n                    <Col sm={{ size: 5, offset: 3 }}>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"correctionNet\"\r\n                        value={Number(\r\n                          Math.abs(\r\n                            weightData.emptyWeight - weightData.grossWeight,\r\n                          ),\r\n                        ).toFixed(0)}\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                </fieldset>\r\n                <Col sm={{ size: 7, offset: 4 }}>\r\n                  <Button color=\"primary\" type=\"submit\">\r\n                    Complete\r\n                  </Button>\r\n                  <Button\r\n                    color=\"secondary\"\r\n                    className=\"ml-2\"\r\n                    onClick={() => setWeightData(initialState)}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </Col>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      {/* Data openModal */}\r\n      <DataModal\r\n        modal={openModal}\r\n        toggle={() => setOpenModal(!openModal)}\r\n        masterItem={masterItem}\r\n        onSelect={handleSelectItem}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ManualWeighing\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Col, FormGroup, Label, Input } from 'reactstrap'\r\n\r\nconst InputName = ({ label, name, value, handleChange }) => {\r\n  return (\r\n    <FormGroup row>\r\n      <Label for=\"item1\" xs={5}>\r\n        {label}\r\n      </Label>\r\n      <Col xs={7}>\r\n        <Input type=\"text\" name={name} value={value} onChange={handleChange} />\r\n      </Col>\r\n    </FormGroup>\r\n  )\r\n}\r\nInputName.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n}\r\nexport default InputName\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Input } from 'reactstrap'\r\n\r\nconst SelectDisplay = ({ name, value, handleChange }) => {\r\n  return (\r\n    <td style={{ minWidth: '100px' }}>\r\n      <Input type=\"select\" name={name} value={value} onChange={handleChange}>\r\n        <option value>Yes</option>\r\n        <option value={false}>No</option>\r\n      </Input>\r\n    </td>\r\n  )\r\n}\r\n\r\nSelectDisplay.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  value: PropTypes.bool.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n}\r\nexport default SelectDisplay\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Input } from 'reactstrap'\r\n\r\nconst SelectRequired = ({ name, value, handleChange }) => {\r\n  return (\r\n    <td>\r\n      <Input type=\"select\" name={name} value={value} onChange={handleChange}>\r\n        <option value>Yes</option>\r\n        <option value={false}>No</option>\r\n      </Input>\r\n    </td>\r\n  )\r\n}\r\nSelectRequired.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  value: PropTypes.bool.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n}\r\nexport default SelectRequired\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  Form,\r\n  Table,\r\n  Spinner,\r\n} from 'reactstrap'\r\nimport {\r\n  getItemsOperationSetting,\r\n  updateItemsOperationSetting,\r\n} from '../../../actions/setting/itemOperationSettingActions'\r\n\r\nimport InputName from './InputName'\r\nimport SelectDisplay from './SelectDisplay'\r\nimport SelectRequired from './SelectRequired'\r\n\r\nconst initialState = {\r\n  _id: '',\r\n  item1: {\r\n    name: '',\r\n    display: true,\r\n    require: true,\r\n  },\r\n  item2: {\r\n    name: '',\r\n    display: true,\r\n    require: true,\r\n  },\r\n  item3: {\r\n    name: '',\r\n    display: true,\r\n    require: true,\r\n  },\r\n  item4: {\r\n    name: '',\r\n    display: true,\r\n    require: true,\r\n  },\r\n  item5: {\r\n    name: '',\r\n    display: true,\r\n    require: true,\r\n  },\r\n  item6: {\r\n    name: '',\r\n    display: true,\r\n    require: true,\r\n  },\r\n}\r\nconst ItemOperationSetting = () => {\r\n  const isLoading = useSelector(state => state.itemOperationSetting.isLoading)\r\n  const itemOperation = useSelector(state => state.itemOperationSetting.payload)\r\n  const dispatch = useDispatch()\r\n  const [item, setItem] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    dispatch(getItemsOperationSetting())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    setItem(itemOperation)\r\n  }, [itemOperation])\r\n\r\n  const handleChangeItemName = e => {\r\n    const { name, value } = e.target\r\n    setItem({\r\n      ...item,\r\n      [name]: {\r\n        ...item[name],\r\n        name: value,\r\n      },\r\n    })\r\n  }\r\n\r\n  const handleChangeItemDisplay = e => {\r\n    const { name, value } = e.target\r\n    setItem({\r\n      ...item,\r\n      [name]: {\r\n        ...item[name],\r\n        display: value,\r\n      },\r\n    })\r\n  }\r\n\r\n  const handleChangeItemRequired = e => {\r\n    const { name, value } = e.target\r\n    setItem({\r\n      ...item,\r\n      [name]: {\r\n        ...item[name],\r\n        require: value,\r\n      },\r\n    })\r\n  }\r\n\r\n  const renderSelectDisplay = []\r\n  const renderSelectRequired = []\r\n  const renderInputName = []\r\n  for (let i = 1; i <= 6; i += 1) {\r\n    renderInputName.push(\r\n      <InputName\r\n        key={i}\r\n        label={`Item ${i} name:`}\r\n        name={`item${i}`}\r\n        value={item[`item${i}`].name || ''}\r\n        handleChange={handleChangeItemName}\r\n      />,\r\n    )\r\n    renderSelectDisplay.push(\r\n      <SelectDisplay\r\n        key={i}\r\n        name={`item${i}`}\r\n        value={item[`item${i}`].display || false}\r\n        handleChange={handleChangeItemDisplay}\r\n      />,\r\n    )\r\n    renderSelectRequired.push(\r\n      <SelectRequired\r\n        key={i}\r\n        name={`item${i}`}\r\n        value={item[`item${i}`].require || false}\r\n        handleChange={handleChangeItemRequired}\r\n      />,\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        <div className=\"animated fadeIn pt-3 text-center\">\r\n          <Spinner color=\"secondary\" />\r\n        </div>\r\n      ) : (\r\n        <Row>\r\n          <Col lg={6} xl={6}>\r\n            <Card className=\"mb-2\">\r\n              <CardBody>\r\n                <CardTitle>\r\n                  <b>Items name</b>\r\n                </CardTitle>\r\n                <Form>{renderInputName}</Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col lg={12} xl={10}>\r\n            <Card>\r\n              <CardBody>\r\n                <CardTitle>\r\n                  <b>Item usage conditions</b>\r\n                </CardTitle>\r\n                <Table bordered responsive>\r\n                  <thead>\r\n                    <tr>\r\n                      <th />\r\n                      <th>{item.item1.name}</th>\r\n                      <th>{item.item2.name}</th>\r\n                      <th>{item.item3.name}</th>\r\n                      <th>{item.item4.name}</th>\r\n                      <th>{item.item5.name}</th>\r\n                      <th>{item.item6.name}</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr>\r\n                      <th>Use this item</th>\r\n                      {renderSelectDisplay}\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Required</th>\r\n                      {renderSelectRequired}\r\n                    </tr>\r\n                  </tbody>\r\n                </Table>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n\r\n      <Row>\r\n        <Col xs={12} lg=\"11\" className=\"my-3\">\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={() => dispatch(updateItemsOperationSetting(item))}\r\n          >\r\n            Update\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ItemOperationSetting\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from 'reactstrap'\r\n\r\nconst IndicatorDetail = ({\r\n  showIndicator,\r\n  baudRate,\r\n  parity,\r\n  dataBits,\r\n  stopBits,\r\n  handleChange,\r\n}) => {\r\n  return (\r\n    <Col lg={4} xl={6}>\r\n      <Card style={{ display: showIndicator ? '' : 'none' }}>\r\n        <CardBody>\r\n          <CardTitle>\r\n            <b>Indicator settings</b>\r\n          </CardTitle>\r\n          <Form>\r\n            <FormGroup row>\r\n              <Label for=\"item1\" xs={6} lg={12} xl={4}>\r\n                Baud Rate:\r\n              </Label>\r\n              <Col xs={6} lg={12} xl={4}>\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"baudRate\"\r\n                  value={baudRate}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value={1200}>1200</option>\r\n                  <option value={2400}>2400</option>\r\n                  <option value={4800}>4800</option>\r\n                  <option value={9600}>9600</option>\r\n                  <option value={19200}>19200</option>\r\n                  <option value={38400}>38400</option>\r\n                  <option value={57600}>57600</option>\r\n                  <option value={115200}>115200</option>\r\n                </Input>\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Label for=\"item1\" xs={6} lg={12} xl={4}>\r\n                Parity:\r\n              </Label>\r\n              <Col xs={6} lg={12} xl={4}>\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"parity\"\r\n                  value={parity}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value=\"none\">None</option>\r\n                  <option value=\"even\">Even</option>\r\n                  <option value=\"odd\">Odd</option>\r\n                </Input>\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Label for=\"item1\" xs={6} lg={12} xl={4}>\r\n                Data bits:\r\n              </Label>\r\n              <Col xs={6} lg={12} xl={4}>\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"dataBits\"\r\n                  value={dataBits}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value={7}>7</option>\r\n                  <option value={8}>8</option>\r\n                </Input>\r\n              </Col>\r\n            </FormGroup>\r\n            <FormGroup row>\r\n              <Label for=\"item1\" xs={6} lg={12} xl={4}>\r\n                Stop bits:\r\n              </Label>\r\n              <Col xs={6} lg={12} xl={4}>\r\n                <Input\r\n                  type=\"select\"\r\n                  name=\"stopBits\"\r\n                  value={stopBits}\r\n                  onChange={handleChange}\r\n                >\r\n                  <option value={1}>1</option>\r\n                  <option value={2}>2</option>\r\n                </Input>\r\n              </Col>\r\n            </FormGroup>\r\n          </Form>\r\n        </CardBody>\r\n      </Card>\r\n    </Col>\r\n  )\r\n}\r\n\r\nIndicatorDetail.propTypes = {\r\n  showIndicator: PropTypes.bool.isRequired,\r\n  baudRate: PropTypes.number.isRequired,\r\n  parity: PropTypes.string.isRequired,\r\n  dataBits: PropTypes.number.isRequired,\r\n  stopBits: PropTypes.number.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default IndicatorDetail\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Table,\r\n  Spinner,\r\n} from 'reactstrap'\r\nimport {\r\n  getWeighingOperationSetting,\r\n  getSerialPorts,\r\n  updateWeighingOperationSetting,\r\n} from '../../../actions/setting/weighingOperationSettingActions'\r\nimport IndicatorDetail from './IndicatorDetail'\r\n\r\nconst initialState = {\r\n  _id: '',\r\n  indicatorSetting: {\r\n    portName: '',\r\n    baudRate: 0,\r\n    parity: '',\r\n    dataBits: 0,\r\n    stopBits: 0,\r\n  },\r\n  weighingOperationSetting: {\r\n    weighingStartWeight: 0,\r\n    slipNoStart: 0,\r\n    documentNumbering: 0,\r\n  },\r\n  maintenanceDataUpload: {\r\n    isEnabling: false,\r\n    uploadInterval: 1,\r\n  },\r\n}\r\nconst OperationSetting = () => {\r\n  const isLoading = useSelector(\r\n    state => state.weighingOperationSetting.isLoading,\r\n  )\r\n  const operationSetting = useSelector(\r\n    state => state.weighingOperationSetting.payload,\r\n  )\r\n  const serialPorts = useSelector(\r\n    state => state.weighingOperationSetting.serialPorts,\r\n  )\r\n  const dispatch = useDispatch()\r\n  const [item, setItem] = useState(initialState)\r\n  const [showIndicator, setShowIndicator] = useState(false)\r\n  const [showSlipPrinter, setShowSlipPrinter] = useState(false)\r\n\r\n  useEffect(() => {\r\n    dispatch(getWeighingOperationSetting())\r\n    dispatch(getSerialPorts())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    setItem(operationSetting)\r\n  }, [operationSetting])\r\n\r\n  const handleChangeOperationWeighing = e => {\r\n    const { name, value } = e.target\r\n    setItem({\r\n      ...item,\r\n      weighingOperationSetting: {\r\n        ...item.weighingOperationSetting,\r\n        [name]: value,\r\n      },\r\n    })\r\n  }\r\n\r\n  const handleChangeIndicatorSetting = e => {\r\n    const { name, value } = e.target\r\n    setItem({\r\n      ...item,\r\n      indicatorSetting: {\r\n        ...item.indicatorSetting,\r\n        [name]: value,\r\n      },\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        <div className=\"animated fadeIn pt-3 text-center\">\r\n          <Spinner color=\"secondary\" />\r\n        </div>\r\n      ) : (\r\n        <Row>\r\n          <Col lg={8} xl={6}>\r\n            <Card>\r\n              <CardBody>\r\n                <CardTitle>\r\n                  <b>Operation Weighing</b>\r\n                </CardTitle>\r\n                <Form>\r\n                  <FormGroup row>\r\n                    <Label for=\"item1\" sm={6}>\r\n                      Weighing start weight:\r\n                    </Label>\r\n                    <Col sm={4}>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"weighingStartWeight\"\r\n                        value={\r\n                          item.weighingOperationSetting.weighingStartWeight ||\r\n                          ''\r\n                        }\r\n                        onChange={handleChangeOperationWeighing}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Label for=\"item1\" sm={6}>\r\n                      How to number Slip No:\r\n                    </Label>\r\n                    <Col sm={6}>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"slipNoStart\"\r\n                        value={item.weighingOperationSetting.slipNoStart}\r\n                        onChange={handleChangeOperationWeighing}\r\n                      >\r\n                        <option value={0}>Starts at No.1 every day</option>\r\n                        <option value={1}>\r\n                          Starts with the specified number every day\r\n                        </option>\r\n                        <option value={2}>Sequential number</option>\r\n                      </Input>\r\n                    </Col>\r\n                  </FormGroup>\r\n                  <FormGroup row>\r\n                    <Label for=\"item1\" sm={6}>\r\n                      Document number for next weighing:\r\n                    </Label>\r\n                    <Col sm={2}>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"documentNumbering\"\r\n                        value={\r\n                          item.weighingOperationSetting.documentNumbering || 0\r\n                        }\r\n                        disabled={\r\n                          item.weighingOperationSetting.slipNoStart === 0\r\n                        }\r\n                        onChange={handleChangeOperationWeighing}\r\n                      />\r\n                    </Col>\r\n                  </FormGroup>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n            <Card className=\"mt-3\">\r\n              <CardBody>\r\n                <CardTitle>\r\n                  <b>Devices Setting</b>\r\n                </CardTitle>\r\n                <Form>\r\n                  <FormGroup row>\r\n                    <Label for=\"item1\" sm={6}>\r\n                      Indicator port:\r\n                    </Label>\r\n                    <Col xs={8}>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"portName\"\r\n                        onChange={handleChangeIndicatorSetting}\r\n                        value={item.indicatorSetting.portName || ''}\r\n                      />\r\n                    </Col>\r\n                    <Col xs={4}>\r\n                      <Button\r\n                        color=\"secondary\"\r\n                        onClick={() => {\r\n                          if (showSlipPrinter) {\r\n                            setShowSlipPrinter(false)\r\n                          }\r\n                          setShowIndicator(!showIndicator)\r\n                        }}\r\n                      >\r\n                        Details\r\n                      </Button>\r\n                    </Col>\r\n                  </FormGroup>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n            <Card className=\"my-3\">\r\n              <CardBody>\r\n                <CardTitle>\r\n                  <b>Serial port list</b>\r\n                </CardTitle>\r\n                {serialPorts.length > 0 ? (\r\n                  <Table bordered hover className=\"dataTable\">\r\n                    <tbody>\r\n                      {serialPorts.map(port => {\r\n                        if (port.manufacturer) {\r\n                          return (\r\n                            <tr key={port.serialNumber}>\r\n                              <td>\r\n                                {port.manufacturer} - (<b>{port.path}</b>)\r\n                              </td>\r\n                              <td>\r\n                                <div className=\"d-flex\">\r\n                                  <Button\r\n                                    color=\"warning\"\r\n                                    className=\"mr-2\"\r\n                                    onClick={() =>\r\n                                      setItem({\r\n                                        ...item,\r\n                                        indicatorSetting: {\r\n                                          ...item.indicatorSetting,\r\n                                          portName: port.path,\r\n                                        },\r\n                                      })\r\n                                    }\r\n                                  >\r\n                                    Set as Indicator\r\n                                  </Button>\r\n                                </div>\r\n                              </td>\r\n                            </tr>\r\n                          )\r\n                        }\r\n                        return <div />\r\n                      })}\r\n                    </tbody>\r\n                  </Table>\r\n                ) : (\r\n                  <div />\r\n                )}\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <IndicatorDetail\r\n            showIndicator={showIndicator || false}\r\n            baudRate={parseInt(item.indicatorSetting.baudRate, 10) || 0}\r\n            parity={item.indicatorSetting.parity || ''}\r\n            dataBits={parseInt(item.indicatorSetting.dataBits, 10) || 0}\r\n            stopBits={parseInt(item.indicatorSetting.stopBits, 10) || 0}\r\n            handleChange={handleChangeIndicatorSetting}\r\n          />\r\n        </Row>\r\n      )}\r\n      <Row>\r\n        <Col xs={4} lg=\"12\" className=\"mb-3\">\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={() => dispatch(updateWeighingOperationSetting(item))}\r\n          >\r\n            Update\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OperationSetting\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  CustomInput,\r\n  Input,\r\n} from 'reactstrap'\r\n\r\nimport {\r\n  getWeighingOperationSetting,\r\n  updateWeighingOperationSetting,\r\n} from '../../actions/setting/weighingOperationSettingActions'\r\n\r\nconst initialState = {\r\n  _id: '',\r\n  maintenanceDataUpload: {\r\n    isEnabling: false,\r\n    uploadInterval: 0,\r\n  },\r\n}\r\nconst MaintenanceDataUpload = () => {\r\n  const opearationSetting = useSelector(\r\n    state => state.weighingOperationSetting.payload,\r\n  )\r\n  const dispatch = useDispatch()\r\n  const [item, setItem] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    dispatch(getWeighingOperationSetting())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    setItem(opearationSetting)\r\n  }, [opearationSetting])\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    dispatch(updateWeighingOperationSetting(item))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col xs={12} md={{ size: 8, offset: 2 }}>\r\n          <Card>\r\n            <CardBody>\r\n              <Form onSubmit={handleSubmit}>\r\n                <FormGroup row>\r\n                  <Label xs={12} xl={6}>\r\n                    <b>Maintenance Data Upload:</b>\r\n                  </Label>\r\n                  <Col xs={12} xl={6}>\r\n                    <div className=\"d-flex mt-1\">\r\n                      <CustomInput\r\n                        checked={item.maintenanceDataUpload.isEnabling === true}\r\n                        type=\"radio\"\r\n                        id=\"rdButton1\"\r\n                        className=\"mr-3\"\r\n                        onChange={() =>\r\n                          setItem({\r\n                            ...item,\r\n                            maintenanceDataUpload: {\r\n                              ...item.maintenanceDataUpload,\r\n                              isEnabling: true,\r\n                            },\r\n                          })\r\n                        }\r\n                        label=\"Enable\"\r\n                      />\r\n                      <CustomInput\r\n                        checked={\r\n                          item.maintenanceDataUpload.isEnabling === false\r\n                        }\r\n                        type=\"radio\"\r\n                        id=\"rdButton2\"\r\n                        label=\"Disable\"\r\n                        onChange={() =>\r\n                          setItem({\r\n                            ...item,\r\n                            maintenanceDataUpload: {\r\n                              ...item.maintenanceDataUpload,\r\n                              isEnabling: false,\r\n                            },\r\n                          })\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                  <Label xs={12} xl={6}>\r\n                    <b>Upload interval:</b>\r\n                  </Label>\r\n                  <Col xs={12} xl={6}>\r\n                    <div className=\"d-flex mt-1\">\r\n                      <Input\r\n                        type=\"number\"\r\n                        max={60}\r\n                        min={1}\r\n                        className=\"mr-2 w-50\"\r\n                        value={item.maintenanceDataUpload.uploadInterval || 0}\r\n                        disabled={!item.maintenanceDataUpload.isEnabling}\r\n                        onChange={e =>\r\n                          setItem({\r\n                            ...item,\r\n                            maintenanceDataUpload: {\r\n                              ...item.maintenanceDataUpload,\r\n                              uploadInterval: e.target.value,\r\n                            },\r\n                          })\r\n                        }\r\n                      />\r\n                      <p className=\"mt-1\">(1 ~ 60 min)</p>\r\n                    </div>\r\n                  </Col>\r\n                </FormGroup>\r\n                <Row>\r\n                  <Col xs={12} xl={{ size: 6, offset: 6 }}>\r\n                    <Button color=\"primary\" type=\"submit\">\r\n                      Update\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MaintenanceDataUpload\r\n","import axios from 'axios'\r\nimport { toast } from 'react-toastify'\r\nimport { GET_USB_DRIVES } from '../action_types'\r\n\r\nexport const getUSBDrives = () => {\r\n  return async dispatch => {\r\n    try {\r\n      const { data } = await axios.get(`/setting/getusbdrives`)\r\n      dispatch({ type: GET_USB_DRIVES, payload: data })\r\n    } catch (error) {\r\n      toast.error(\r\n        'Failed to load data from server. Please restart Raspberry Pi',\r\n        { autoClose: false },\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default getUSBDrives\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  CardText,\r\n  Progress,\r\n} from 'reactstrap'\r\n\r\nconst BackupUSB = ({\r\n  handleSubmit,\r\n  backupDestination,\r\n  setBackupDestination,\r\n  drives,\r\n  isUSBLoading,\r\n}) => {\r\n  return (\r\n    <Row>\r\n      <Col lg={{ size: 10, offset: 1 }} xl={{ size: 8, offset: 2 }}>\r\n        <Card>\r\n          <CardBody>\r\n            <CardTitle>\r\n              <b>Backup data to USB drive</b>\r\n            </CardTitle>\r\n            <Form onSubmit={handleSubmit}>\r\n              <FormGroup row>\r\n                <Label for=\"backupDestination\" sm={4} xl={3}>\r\n                  Destination:\r\n                </Label>\r\n                <Col sm={8} xl={6}>\r\n                  <Input\r\n                    type=\"select\"\r\n                    value={backupDestination}\r\n                    name=\"backupDestination\"\r\n                    onChange={e => setBackupDestination(e.target.value)}\r\n                  >\r\n                    <option>---- Select drive ----</option>\r\n                    {drives.map(drive => {\r\n                      return (\r\n                        <option\r\n                          key={drive.device}\r\n                          value={drive.mountpoints[0].path}\r\n                        >\r\n                          {drive.description}\r\n                        </option>\r\n                      )\r\n                    })}\r\n                  </Input>\r\n                </Col>\r\n              </FormGroup>\r\n              <FormGroup row>\r\n                <Col sm={12} className=\"my-2\">\r\n                  <CardText>\r\n                    <b>1. Select the backup drive in &quot;Destination&quot;</b>\r\n                  </CardText>\r\n                  <CardText>\r\n                    Drives are removable storages such as USB flash drive\r\n                  </CardText>\r\n                  <CardText>\r\n                    <b>2. Click the Backup to USB button to start backup</b>\r\n                  </CardText>\r\n                  <CardText>\r\n                    The data to be backed up is weighing data, master data and\r\n                    setting data\r\n                  </CardText>\r\n                </Col>\r\n              </FormGroup>\r\n              <FormGroup row>\r\n                <Col sm={12}>\r\n                  {isUSBLoading ? (\r\n                    <div>\r\n                      <Progress\r\n                        animated\r\n                        color=\"info\"\r\n                        value=\"100\"\r\n                        className=\"my-1\"\r\n                      />\r\n                      <CardText>\r\n                        <b>Backing up...Please wait a few seconds!</b>\r\n                      </CardText>\r\n                    </div>\r\n                  ) : (\r\n                    <Button type=\"submit\" color=\"primary\">\r\n                      Backup to USB\r\n                    </Button>\r\n                  )}\r\n                </Col>\r\n              </FormGroup>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\nBackupUSB.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  backupDestination: PropTypes.string.isRequired,\r\n  setBackupDestination: PropTypes.func.isRequired,\r\n  // eslint-disable-next-line react/forbid-prop-types\r\n  drives: PropTypes.array.isRequired,\r\n  isUSBLoading: PropTypes.bool.isRequired,\r\n}\r\nexport default BackupUSB\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { getUSBDrives } from '../../../actions/setting/backupActions';\r\n\r\nimport socket from '../../../helpers/socket';\r\n// import BackupAWS from './BackupAWS';\r\nimport BackupUSB from './BackupUSB';\r\n\r\nconst Backup = () => {\r\n  const drives = useSelector(state => state.backup.payload);\r\n  const dispatch = useDispatch();\r\n  const [backupDestination, setBackupDestination] = useState('');\r\n  const [isUSBLoading, setIsUSBLoading] = useState(false);\r\n  // const [isAWSLoading, setIsAWSLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUSBDrives());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    socket.on('backupComplete', () => {\r\n      setIsUSBLoading(false);\r\n      toast.success('Backup successfully!');\r\n    });\r\n\r\n    socket.on('backupError', () => {\r\n      setIsUSBLoading(false);\r\n      toast.error('Something went wrong! Please try again!');\r\n    });\r\n\r\n    // socket.on('uploadAWSDone', () => {\r\n    //   setIsAWSLoading(false);\r\n    //   toast.success('Uploading data to AWS successfully!');\r\n    // });\r\n\r\n    // socket.on('uploadAWSError', () => {\r\n    //   setIsAWSLoading(false);\r\n    //   toast.error('Something went wrong! Please try again!');\r\n    // });\r\n  }, []);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (backupDestination !== '') {\r\n      setIsUSBLoading(true);\r\n      socket.emit('startBackup', backupDestination);\r\n    } else {\r\n      toast.error('Please choose a USB drive!');\r\n    }\r\n  };\r\n\r\n  // const handleUploadAWS = () => {\r\n  //   setIsAWSLoading(true);\r\n  //   socket.emit('startUploadAWS');\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      <BackupUSB\r\n        handleSubmit={handleSubmit}\r\n        backupDestination={backupDestination}\r\n        setBackupDestination={setBackupDestination}\r\n        drives={drives}\r\n        isUSBLoading={isUSBLoading}\r\n      />\r\n      {/* <BackupAWS\r\n        isAWSLoading={isAWSLoading}\r\n        handleUploadAWS={handleUploadAWS}\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Backup;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Progress,\r\n} from 'reactstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { getUSBDrives } from '../../actions/setting/backupActions';\r\n\r\nimport socket from '../../helpers/socket';\r\n\r\nconst Restore = () => {\r\n  const drives = useSelector(state => state.backup.payload);\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [restoreDestination, setRestoreDestination] = useState('');\r\n  const [restoreItem, setRestoreItem] = useState({\r\n    setting: false,\r\n    data: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(getUSBDrives());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    socket.on('dataNotFound', () => {\r\n      setIsLoading(false);\r\n      toast.error('Cannot found data to restore!');\r\n    });\r\n    socket.on('restoreComplete', () => {\r\n      setIsLoading(false);\r\n      toast.success('Restore successfully!');\r\n    });\r\n    socket.on('restoreError', () => {\r\n      setIsLoading(false);\r\n      toast.error('Some thing went wrong! Please try again!');\r\n    });\r\n  }, []);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    socket.emit('startRestore', {\r\n      path: restoreDestination,\r\n      item: restoreItem,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col lg={{ size: 8, offset: 2 }} xl={{ size: 6, offset: 3 }}>\r\n          <Card>\r\n            <CardBody>\r\n              <CardTitle>\r\n                <b>Restore</b>\r\n              </CardTitle>\r\n              <Form onSubmit={handleSubmit}>\r\n                <FormGroup row>\r\n                  <Label for=\"restoreDestination\" lg={4}>\r\n                    Destination:\r\n                  </Label>\r\n                  <Col lg={8}>\r\n                    <Input\r\n                      type=\"select\"\r\n                      value={restoreDestination}\r\n                      name=\"restoreDestination\"\r\n                      onChange={e => setRestoreDestination(e.target.value)}\r\n                    >\r\n                      <option>---- Select drive ----</option>\r\n                      {drives.map(drive => {\r\n                        return (\r\n                          <option\r\n                            key={drive.device}\r\n                            value={`${drive.mountpoints[0].path}/ats-1200`}\r\n                          >\r\n                            {drive.description}\r\n                          </option>\r\n                        );\r\n                      })}\r\n                    </Input>\r\n                  </Col>\r\n                </FormGroup>\r\n                <FormGroup tag=\"fieldset\" row>\r\n                  <Col lg={12} className=\"my-2\">\r\n                    <CardText>\r\n                      <b>Restore items</b>\r\n                    </CardText>\r\n                    <FormGroup check>\r\n                      <Label check>\r\n                        <Input\r\n                          type=\"checkbox\"\r\n                          onChange={e =>\r\n                            setRestoreItem({\r\n                              ...restoreItem,\r\n                              data: e.target.checked,\r\n                            })\r\n                          }\r\n                        />{' '}\r\n                        Restore weighing data\r\n                      </Label>\r\n                    </FormGroup>\r\n                    <FormGroup check>\r\n                      <Label check>\r\n                        <Input\r\n                          type=\"checkbox\"\r\n                          onChange={e =>\r\n                            setRestoreItem({\r\n                              ...restoreItem,\r\n                              setting: e.target.checked,\r\n                            })\r\n                          }\r\n                        />{' '}\r\n                        Restore settings\r\n                      </Label>\r\n                    </FormGroup>\r\n                  </Col>\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                  <Col lg={12}>\r\n                    {isLoading ? (\r\n                      <div>\r\n                        <Progress\r\n                          animated\r\n                          color=\"info\"\r\n                          value=\"100\"\r\n                          className=\"my-1\"\r\n                        />\r\n                        <CardText>\r\n                          <b>Restoring...Please wait a few seconds!</b>\r\n                        </CardText>\r\n                      </div>\r\n                    ) : (\r\n                      <Button type=\"submit\" color=\"primary\">\r\n                        Start Restore\r\n                      </Button>\r\n                    )}\r\n                  </Col>\r\n                </FormGroup>\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Restore;\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n  Progress,\r\n  Jumbotron,\r\n} from 'reactstrap'\r\nimport { toast } from 'react-toastify'\r\nimport socket from '../../helpers/socket'\r\n\r\nconst Update = () => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    socket.on('updateComplete', () => {\r\n      socket.emit('restartServer')\r\n      setTimeout(() => {\r\n        setIsLoading(false)\r\n        toast.success('Success! Please refresh browser to apply changes')\r\n      }, 4000)\r\n    })\r\n    socket.on('updateError', () => {\r\n      setIsLoading(false)\r\n      toast.error('Something went wrong! Please contact IT support.')\r\n    })\r\n  }, [])\r\n\r\n  const onUpdate = () => {\r\n    setIsLoading(true)\r\n    socket.emit('startUpdate')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col lg={{ size: 8, offset: 2 }}>\r\n          <Card>\r\n            <CardBody>\r\n              <CardTitle>\r\n                <b>Software Update:</b>\r\n              </CardTitle>\r\n              <Jumbotron>\r\n                <ul>\r\n                  <li>\r\n                    Click <b>Update</b> button to install latest update{' '}\r\n                    <b>(Internet connection is required)</b>\r\n                  </li>\r\n                  <li>\r\n                    Update process will took a few minutes. Do not refresh\r\n                    browser until it complete.\r\n                  </li>\r\n                </ul>\r\n              </Jumbotron>\r\n              {isLoading ? (\r\n                <div>\r\n                  <Progress\r\n                    animated\r\n                    color=\"info\"\r\n                    value=\"100\"\r\n                    className=\"my-1\"\r\n                  />\r\n                  <CardText>\r\n                    <b>Updating...Please wait a few minutes!</b>\r\n                  </CardText>\r\n                </div>\r\n              ) : (\r\n                <Button color=\"primary\" onClick={onUpdate}>\r\n                  Update\r\n                </Button>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Update\r\n","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\n\r\nimport MainLayout from './components/MainLayout'\r\nimport RouteLayout from './components/RouteLayout'\r\nimport Weighing from './pages/Weighing/Index'\r\nimport StayingTruckList from './pages/StayingTruckList'\r\nimport BrandMaster from './pages/MasterMenu/BrandMaster'\r\nimport TruckMaster from './pages/MasterMenu/TruckMaster/TruckMaster'\r\nimport DestinationMaster from './pages/MasterMenu/DestinationMaster'\r\nimport OtherMaster from './pages/MasterMenu/OtherMaster'\r\nimport VendorMaster from './pages/MasterMenu/VendorMaster'\r\nimport MeasurementDataList from './pages/MeasurementDataList'\r\nimport SummaryReport from './pages/SummaryReport'\r\nimport ManualWeighing from './pages/ManualWeighing'\r\nimport ItemOperationSetting from './pages/SettingMenu/ItemOperationSetting/index'\r\nimport OperationSetting from './pages/SettingMenu/OperationSetting/Index'\r\nimport MaintenanceDataUpload from './pages/SettingMenu/MaintenanceDataUpload'\r\nimport Backup from './pages/SettingMenu/Backup/Index'\r\nimport Restore from './pages/SettingMenu/Restore'\r\nimport Update from './pages/SettingMenu/Update'\r\n\r\nconst loading = () => (\r\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\r\n)\r\nconst NotFound = React.lazy(() => import('./components/NotFound'))\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <React.Suspense fallback={loading()}>\r\n      <Switch>\r\n        <RouteLayout layout={MainLayout} component={Weighing} exact path=\"/\" />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={BrandMaster}\r\n          exact\r\n          path=\"/brand-master\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={TruckMaster}\r\n          exact\r\n          path=\"/truck-master\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={DestinationMaster}\r\n          exact\r\n          path=\"/destination-master\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={OtherMaster}\r\n          exact\r\n          path=\"/other-master\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={VendorMaster}\r\n          exact\r\n          path=\"/vendor-master\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={StayingTruckList}\r\n          exact\r\n          path=\"/staying-truck-list\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={MeasurementDataList}\r\n          exact\r\n          path=\"/measurement-data-list\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={SummaryReport}\r\n          exact\r\n          path=\"/summary-report\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={ManualWeighing}\r\n          exact\r\n          path=\"/manual-weighing\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={ItemOperationSetting}\r\n          exact\r\n          path=\"/item-operation-setting\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={OperationSetting}\r\n          exact\r\n          path=\"/operation-setting\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={MaintenanceDataUpload}\r\n          exact\r\n          path=\"/maintenance-data-upload\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={Backup}\r\n          exact\r\n          path=\"/backup\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={Restore}\r\n          exact\r\n          path=\"/restore\"\r\n        />\r\n        <RouteLayout\r\n          layout={MainLayout}\r\n          component={Update}\r\n          exact\r\n          path=\"/update\"\r\n        />\r\n\r\n        {/* Finally, catch all unmatched routes */}\r\n        <Route component={NotFound} />\r\n      </Switch>\r\n    </React.Suspense>\r\n  )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react';\nimport './App.css';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport { ToastContainer } from 'react-toastify';\nimport Routes from './Routes';\n\nconst browserHistory = createBrowserHistory();\n\nfunction App() {\n  return (\n    <Router history={browserHistory}>\n      <Routes />\n      <ToastContainer autoClose={5000} position=\"top-right\" />\n    </Router>\n  );\n}\n\nexport default App;\n","import {\r\n  GET_BRANDS_MASTER,\r\n  GET_BRANDS_MASTER_SUCCESS,\r\n  CREATE_BRAND_MASTER,\r\n  UPDATE_BRAND_MASTER,\r\n  DELETE_BRAND_MASTER,\r\n} from '../../actions/action_types'\r\n\r\nconst initialState = {\r\n  payload: [],\r\n  isLoading: false,\r\n}\r\n\r\nconst brandReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_BRANDS_MASTER:\r\n      return { ...state, isLoading: true }\r\n    case GET_BRANDS_MASTER_SUCCESS:\r\n      return { ...state, isLoading: false, payload: action.payload }\r\n    case CREATE_BRAND_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: [...state.payload, action.payload],\r\n      }\r\n    case UPDATE_BRAND_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.map(item => {\r\n          if (item._id === action.payload._id) return action.payload\r\n          return item\r\n        }),\r\n      }\r\n    case DELETE_BRAND_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.filter(item => item._id !== action.payload._id),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default brandReducers\r\n","import {\r\n  GET_VENDORS_MASTER,\r\n  GET_VENDORS_MASTER_SUCCESS,\r\n  CREATE_VENDOR_MASTER,\r\n  UPDATE_VENDOR_MASTER,\r\n  DELETE_VENDOR_MASTER,\r\n} from '../../actions/action_types'\r\n\r\nconst initialState = {\r\n  payload: [],\r\n  isLoading: false,\r\n}\r\n\r\nconst vendorReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_VENDORS_MASTER:\r\n      return { ...state, isLoading: true }\r\n    case GET_VENDORS_MASTER_SUCCESS:\r\n      return { ...state, isLoading: false, payload: action.payload }\r\n    case CREATE_VENDOR_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: [...state.payload, action.payload],\r\n      }\r\n    case UPDATE_VENDOR_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.map(item => {\r\n          if (item._id === action.payload._id) return action.payload\r\n          return item\r\n        }),\r\n      }\r\n    case DELETE_VENDOR_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.filter(item => item._id !== action.payload._id),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default vendorReducers\r\n","import {\r\n  GET_DESTINATIONS_MASTER,\r\n  GET_DESTINATIONS_MASTER_SUCCESS,\r\n  CREATE_DESTINATION_MASTER,\r\n  UPDATE_DESTINATION_MASTER,\r\n  DELETE_DESTINATION_MASTER,\r\n} from '../../actions/action_types'\r\n\r\nconst initialState = {\r\n  payload: [],\r\n  isLoading: false,\r\n}\r\n\r\nconst destinationReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_DESTINATIONS_MASTER:\r\n      return { ...state, isLoading: true }\r\n    case GET_DESTINATIONS_MASTER_SUCCESS:\r\n      return { ...state, isLoading: false, payload: action.payload }\r\n    case CREATE_DESTINATION_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: [...state.payload, action.payload],\r\n      }\r\n    case UPDATE_DESTINATION_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.map(item => {\r\n          if (item._id === action.payload._id) return action.payload\r\n          return item\r\n        }),\r\n      }\r\n    case DELETE_DESTINATION_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.filter(item => item._id !== action.payload._id),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default destinationReducers\r\n","import {\r\n  GET_OTHERS_MASTER,\r\n  GET_OTHERS_MASTER_SUCCESS,\r\n  CREATE_OTHER_MASTER,\r\n  UPDATE_OTHER_MASTER,\r\n  DELETE_OTHER_MASTER,\r\n} from '../../actions/action_types'\r\n\r\nconst initialState = {\r\n  payload: [],\r\n  isLoading: false,\r\n}\r\n\r\nconst otherReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_OTHERS_MASTER:\r\n      return { ...state, isLoading: true }\r\n    case GET_OTHERS_MASTER_SUCCESS:\r\n      return { ...state, isLoading: false, payload: action.payload }\r\n    case CREATE_OTHER_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: [...state.payload, action.payload],\r\n      }\r\n    case UPDATE_OTHER_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.map(item => {\r\n          if (item._id === action.payload._id) return action.payload\r\n          return item\r\n        }),\r\n      }\r\n    case DELETE_OTHER_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.filter(item => item._id !== action.payload._id),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default otherReducers\r\n","import {\r\n  GET_TRUCKS_MASTER,\r\n  GET_TRUCKS_MASTER_SUCCESS,\r\n  CREATE_TRUCK_MASTER,\r\n  UPDATE_TRUCK_MASTER,\r\n  DELETE_TRUCK_MASTER,\r\n} from '../../actions/action_types'\r\n\r\nconst initialState = {\r\n  payload: [],\r\n  isLoading: false,\r\n}\r\n\r\nconst truckReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_TRUCKS_MASTER:\r\n      return { ...state, isLoading: true }\r\n    case GET_TRUCKS_MASTER_SUCCESS:\r\n      return { ...state, isLoading: false, payload: action.payload }\r\n    case CREATE_TRUCK_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: [...state.payload, action.payload],\r\n      }\r\n    case UPDATE_TRUCK_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.map(item => {\r\n          if (item._id === action.payload._id) return action.payload\r\n          return item\r\n        }),\r\n      }\r\n    case DELETE_TRUCK_MASTER:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.filter(item => item._id !== action.payload._id),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default truckReducers\r\n","import {\r\n  GET_STAYING_TRUCKS,\r\n  GET_STAYING_TRUCKS_SUCCESS,\r\n  UPDATE_STAYING_TRUCK,\r\n  DELETE_STAYING_TRUCK,\r\n  CREATE_STAYING_TRUCK,\r\n} from '../actions/action_types'\r\n\r\nconst initialState = {\r\n  payload: [],\r\n  isLoading: false,\r\n}\r\n\r\nconst stayingTruckReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_STAYING_TRUCKS:\r\n      return { ...state, isLoading: true }\r\n    case GET_STAYING_TRUCKS_SUCCESS:\r\n      return { ...state, isLoading: false, payload: action.payload }\r\n    case CREATE_STAYING_TRUCK:\r\n      return {\r\n        ...state,\r\n        payload: [...state.payload, action.payload],\r\n      }\r\n    case UPDATE_STAYING_TRUCK:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.map(item => {\r\n          if (item._id === action.payload._id) return action.payload\r\n          return item\r\n        }),\r\n      }\r\n    case DELETE_STAYING_TRUCK:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.filter(item => item._id !== action.payload._id),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default stayingTruckReducers\r\n","import {\r\n  GET_ITEM_OPERATION_SETTING,\r\n  GET_ITEM_OPERATION_SETTING_SUCCESS,\r\n  UPDATE_ITEM_OPERATION_SETTING,\r\n} from '../../actions/action_types'\r\n\r\nconst initialState = {\r\n  payload: {\r\n    _id: '',\r\n    item1: {},\r\n    item2: {},\r\n    item3: {},\r\n    item4: {},\r\n    item5: {},\r\n    item6: {},\r\n  },\r\n  isLoading: false,\r\n}\r\n\r\nconst itemOperationSettingReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_ITEM_OPERATION_SETTING:\r\n      return { ...state, isLoading: true }\r\n    case GET_ITEM_OPERATION_SETTING_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        payload: {\r\n          ...state.payload,\r\n          _id: action.payload._id,\r\n          item1: action.payload.item1,\r\n          item2: action.payload.item2,\r\n          item3: action.payload.item3,\r\n          item4: action.payload.item4,\r\n          item5: action.payload.item5,\r\n          item6: action.payload.item6,\r\n        },\r\n      }\r\n    case UPDATE_ITEM_OPERATION_SETTING:\r\n      return {\r\n        ...state,\r\n        payload: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default itemOperationSettingReducers\r\n","import {\r\n  GET_MEASUREMENT_DATA_LIST,\r\n  GET_MEASUREMENT_DATA_LIST_SUCCESS,\r\n  DELETE_MEASUREMENT_DATA_LIST,\r\n  UPDATE_MEASUREMENT_DATA_LIST,\r\n} from '../actions/action_types'\r\n\r\nconst initialState = {\r\n  payload: [],\r\n  isLoading: false,\r\n}\r\n\r\nconst measurementDataListReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_MEASUREMENT_DATA_LIST:\r\n      return { ...state, isLoading: true }\r\n    case GET_MEASUREMENT_DATA_LIST_SUCCESS:\r\n      return { ...state, isLoading: false, payload: action.payload }\r\n    case UPDATE_MEASUREMENT_DATA_LIST:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.map(item => {\r\n          if (item._id === action.payload._id) return action.payload\r\n          return item\r\n        }),\r\n      }\r\n    case DELETE_MEASUREMENT_DATA_LIST:\r\n      return {\r\n        ...state,\r\n        payload: state.payload.filter(item => item._id !== action.payload._id),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default measurementDataListReducers\r\n","import {\r\n  CREATE_WEIGHING,\r\n  UPDATE_WEIGHING,\r\n  GET_MAX_SLIPNO,\r\n  GET_STAYING_TRUCKS,\r\n  GET_STAYING_TRUCKS_SUCCESS,\r\n  UPDATE_STAYING_TRUCK,\r\n  DELETE_STAYING_TRUCK,\r\n  CREATE_STAYING_TRUCK,\r\n  GET_MEASUREMENT_DATA_LIST,\r\n  GET_MEASUREMENT_DATA_LIST_SUCCESS,\r\n  UPDATE_MEASUREMENT_DATA_LIST,\r\n  DELETE_MEASUREMENT_DATA_LIST,\r\n} from '../actions/action_types'\r\n\r\nconst initialState = {\r\n  weighing: {},\r\n  maxSlipNo: 0,\r\n  stayingTrucks: [],\r\n  measurementData: [],\r\n  isLoading: false,\r\n}\r\n\r\nconst weighingReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_WEIGHING:\r\n      return {\r\n        ...state,\r\n        weighing: action.payload,\r\n      }\r\n    case UPDATE_WEIGHING:\r\n      return {\r\n        ...state,\r\n        weighing: action.payload,\r\n        stayingTrucks: state.stayingTrucks.filter(\r\n          item => item._id !== action.payload._id,\r\n        ),\r\n      }\r\n    case GET_MAX_SLIPNO:\r\n      return { ...state, maxSlipNo: action.payload }\r\n    case GET_STAYING_TRUCKS:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      }\r\n    case GET_STAYING_TRUCKS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        stayingTrucks: action.payload,\r\n      }\r\n    case CREATE_STAYING_TRUCK:\r\n      return {\r\n        ...state,\r\n        stayingTrucks: [...state.stayingTrucks, action.payload],\r\n      }\r\n    case UPDATE_STAYING_TRUCK:\r\n      return {\r\n        ...state,\r\n        stayingTrucks: state.payload.map(item => {\r\n          if (item._id === action.payload._id) return action.payload\r\n          return item\r\n        }),\r\n      }\r\n    case DELETE_STAYING_TRUCK:\r\n      return {\r\n        ...state,\r\n        stayingTrucks: state.stayingTrucks.filter(\r\n          item => item._id !== action.payload._id,\r\n        ),\r\n      }\r\n    case GET_MEASUREMENT_DATA_LIST:\r\n      return { ...state, isLoading: true }\r\n    case GET_MEASUREMENT_DATA_LIST_SUCCESS:\r\n      return { ...state, isLoading: false, measurementData: action.payload }\r\n    case UPDATE_MEASUREMENT_DATA_LIST:\r\n      return {\r\n        ...state,\r\n        measurementData: state.measurementData.map(item => {\r\n          if (item._id === action.payload._id) return action.payload\r\n          return item\r\n        }),\r\n      }\r\n    case DELETE_MEASUREMENT_DATA_LIST:\r\n      return {\r\n        ...state,\r\n        measurementData: state.measurementData.filter(\r\n          item => item._id !== action.payload._id,\r\n        ),\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default weighingReducers\r\n","import {\r\n  GET_WEIGHING_OPERATION_SETTING,\r\n  GET_SERIAL_PORTS,\r\n  UPDATE_WEIGHING_OPERATION_SETTING,\r\n  GET_WEIGHING_OPERATION_SETTING_SUCCESS,\r\n} from '../../actions/action_types'\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  payload: {\r\n    _id: '',\r\n    maintenanceDataUpload: {},\r\n    weighingOperationSetting: {},\r\n    slipPrinterSetting: {},\r\n    indicatorSetting: {},\r\n  },\r\n  serialPorts: [],\r\n}\r\n\r\nconst weighingOperationSettingReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_WEIGHING_OPERATION_SETTING:\r\n      return { ...state, isLoading: true }\r\n    case GET_WEIGHING_OPERATION_SETTING_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        payload: {\r\n          ...state.payload,\r\n          _id: action.payload._id,\r\n          maintenanceDataUpload: action.payload.maintenanceDataUpload,\r\n          weighingOperationSetting: action.payload.weighingOperationSetting,\r\n          slipPrinterSetting: action.payload.slipPrinterSetting,\r\n          indicatorSetting: action.payload.indicatorSetting,\r\n        },\r\n      }\r\n    case GET_SERIAL_PORTS:\r\n      return {\r\n        ...state,\r\n        serialPorts: action.payload,\r\n      }\r\n    case UPDATE_WEIGHING_OPERATION_SETTING:\r\n      return {\r\n        ...state,\r\n        payload: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default weighingOperationSettingReducers\r\n","import {\r\n  GET_SUMMARY_REPORT,\r\n  GET_SUMMARY_REPORT_SUCCESS,\r\n} from '../actions/action_types'\r\n\r\nconst initialState = {\r\n  payload: [],\r\n  isLoading: false,\r\n}\r\n\r\nconst summaryReportReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_SUMMARY_REPORT:\r\n      return { ...state, isLoading: true }\r\n    case GET_SUMMARY_REPORT_SUCCESS:\r\n      return { ...state, isLoading: false, payload: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default summaryReportReducers\r\n","import { GET_USB_DRIVES } from '../../actions/action_types'\r\n\r\nconst initialState = {\r\n  payload: [],\r\n}\r\n\r\nconst backupReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_USB_DRIVES:\r\n      return { ...state, payload: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default backupReducers\r\n","import { combineReducers } from 'redux'\r\nimport brandReducers from './master/brandReducers'\r\nimport vendorReducers from './master/vendorReducers'\r\nimport destinationReducers from './master/destinationReducers'\r\nimport otherReducers from './master/otherReducers'\r\nimport truckReducers from './master/truckReducers'\r\nimport stayingTruckReducers from './stayingTruckReducers'\r\nimport itemOperationSettingReducers from './setting/itemOperationSettingReducers'\r\nimport measurementDataListReducers from './measurementDataListReducers'\r\nimport weighingReducers from './weighingReducers'\r\nimport weighingOperationSettingReducers from './setting/weighingOperationSettingReducers'\r\nimport summaryReportReducers from './summaryReportReducers'\r\nimport backupReducers from './setting/backupReducers'\r\n\r\nconst rootReducer = combineReducers({\r\n  brands: brandReducers,\r\n  vendors: vendorReducers,\r\n  destinations: destinationReducers,\r\n  others: otherReducers,\r\n  trucks: truckReducers,\r\n  stayingTrucks: stayingTruckReducers,\r\n  itemOperationSetting: itemOperationSettingReducers,\r\n  measurementDataList: measurementDataListReducers,\r\n  weighing: weighingReducers,\r\n  weighingOperationSetting: weighingOperationSettingReducers,\r\n  summaryReport: summaryReportReducers,\r\n  backup: backupReducers,\r\n})\r\n\r\nexport default rootReducer\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}